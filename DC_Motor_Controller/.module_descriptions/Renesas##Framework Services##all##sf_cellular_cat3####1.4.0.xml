<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.framework.sf_cellular_cat3" path="ssp_cfg/framework/sf_cellular_cat3_cfg.h" version="0">
		<property default="config.framework.sf_cellular_cat3.param_checking_enable.bsp" display="Parameter Checking" id="module.framework.sf_cellular_cat3.param_checking_enable">
			<option display="Default (BSP)" id="config.framework.sf_cellular_cat3.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="module.framework.sf_cellular_cat3.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="module.framework.sf_cellular_cat3.param_checking_enable.disabled" value="(0)"/>
		</property>
		<property default="config.framework.sf_cellular_cat3.onchip_stack_support.disabled" display="On-Chip Stack Support" id="config.framework.sf_cellular_cat3.onchip_stack_support">
			<option display="Enabled" id="config.framework.sf_cellular_cat3.onchip_stack_support.enabled" value="(1)"/>
			<option display="Disabled" id="config.framework.sf_cellular_cat3.onchip_stack_support.disabled" value="(0)"/>
		</property>
		<property default="config.framework.sf_cellular_cat3.module.eug" display="Modem" id="config.framework.sf_cellular_cat3.module">
			<option display="TEUG" id="config.framework.sf_cellular_cat3.module.eug" value="(0)"/>
			<option display="TSVG" id="config.framework.sf_cellular_cat3.module.svg" value="(1)"/>
		</property>
		<property default="5" display="AT Command Retry Count" id="config.framework.sf_cellular_cat3.retry_count">
		         <constraint display="values range from 5 through 25">
				testInteger("${config.framework.sf_cellular_cat3.retry_count}") &amp;&amp; 
				("${config.framework.sf_cellular_cat3.retry_count}" &gt; 4) &amp;&amp; 
				("${config.framework.sf_cellular_cat3.retry_count}" &lt; 26)
		         </constraint>
		</property>
		<content>
		/** Parameter checking flag */
		#ifndef SF_CELLULAR_CAT3_CFG_PARAM_CHECKING_ENABLE
		#define SF_CELLULAR_CAT3_CFG_PARAM_CHECKING_ENABLE (${module.framework.sf_cellular_cat3.param_checking_enable})
		#endif

		/** On-chip Stack support */
		#ifndef SF_CELLULAR_CAT3_CFG_ONCHIP_STACK_SUPPORT
		#define SF_CELLULAR_CAT3_CFG_ONCHIP_STACK_SUPPORT	(${config.framework.sf_cellular_cat3.onchip_stack_support})
		#endif
		
		/** AT Command Retry Count */
		#ifndef SF_CELLULAR_CAT3_CFG_AT_CMD_RETRY_COUNT
		#define SF_CELLULAR_CAT3_CFG_AT_CMD_RETRY_COUNT	(${config.framework.sf_cellular_cat3.retry_count})
		#endif
		
		/** Sub Module Selection flag */
		#if ${config.framework.sf_cellular_cat3.module}
		/** Define TSVG */
		#ifndef SF_CELLULAR_CAT3_TEUG
		#define SF_CELLULAR_CAT3_TEUG	(0)
		#endif
		#ifndef SF_CELLULAR_CAT3_TSVG
		#define SF_CELLULAR_CAT3_TSVG	(1)
		#endif
		#else
		/** Define TEUG */
		#ifndef SF_CELLULAR_CAT3_TEUG
		#define SF_CELLULAR_CAT3_TEUG	(1)
		#endif
		#ifndef SF_CELLULAR_CAT3_TSVG
		#define SF_CELLULAR_CAT3_TSVG	(0)
		#endif

		#endif
		</content>
	</config>
	<module config="config.framework.sf_cellular_cat3" display="Framework|Networking|Cellular|${module.framework.sf_cellular.name} Cellular Framework on CAT3 Modem" id="module.framework.sf_cellular_cat3" version="1">
		<constraint display="Module instances must have unique names">
			"${interface.framework.sf_cellular_cat3.${module.framework.sf_cellular.name}}" === "1"
		</constraint>
		<requires interface="_rtos" />
		<requires id="module.framework.sf_cellular_common" interface="interface.framework.sf_cellular_common" display="Add Cellular Framework Common" />
		<requires id="module.framework.sf_cellular_cat3.requires.sf_comms" interface="interface.framework.sf_comms" display="Add SF Communications Framework" />
		<provides interface="interface.framework.sf_cellular" />
		<provides interface="interface.framework.sf_cellular_cat3"/>
		<provides interface="interface.framework.sf_cellular.${module.framework.sf_cellular.name}" />
		<provides interface="interface.framework.sf_cellular_cat3.${module.framework.sf_cellular.name}" />
		<provides interface="interface.framework.sf_cellular_cat3_onchip_stack" />
		<property default="g_sf_cellular${_instance}" display="Name" id="module.framework.sf_cellular.name">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular.name}")</constraint>
		</property>
		<property default="1111" display="SIM Pin (Used to Unlock SIM)" id="module.framework.sf_cellular_cat3.sim_pin">
			<constraint display="Value must be a valid 4/8 Digit Number">testInteger("${module.framework.sf_cellular_cat3.sim_pin}")</constraint>
		</property>
		<property default="12345678" display="SIM PUK Pin (Used to Unlock SIM)" id="module.framework.sf_cellular_cat3.sim_puk">
			<constraint display="Value must be a valid 8 Digit Number">testInteger("${module.framework.sf_cellular_cat3.sim_puk}")</constraint>
		</property>
		<property default="0" display="Number of Preferred Operator" id="module.framework.sf_cellular_cat3.num_pref_ops">
			<constraint display="Value must be in range 0 to 5">
				testInteger("${module.framework.sf_cellular_cat3.num_pref_ops}") &amp;&amp; ("${module.framework.sf_cellular_cat3.num_pref_ops}" &gt; -1) &amp;&amp; ("${module.framework.sf_cellular_cat3.num_pref_ops}" &lt; 6)
			</constraint>
		</property>	
		<property default="40422" display="Preferred Operator 1 Name" id="module.framework.sf_cellular_cat3.pref_op1_name">
		</property>
		<property default="module.framework.sf_cellular_cat3.op1_name_format.numeric" display="Preferred Operator 1 Name Format" id="module.framework.sf_cellular_cat3.op1_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.op1_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.op1_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.op1_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="40424" display="Preferred Operator 2 Name" id="module.framework.sf_cellular_cat3.pref_op2_name">
		</property>
		<property default="module.framework.sf_cellular_cat3.op2_name_format.numeric" display="Preferred Operator 2 Name Format" id="module.framework.sf_cellular_cat3.op2_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.op2_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.op2_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.op2_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="40422" display="Preferred Operator 3 Name" id="module.framework.sf_cellular_cat3.pref_op3_name">
		</property>
		<property default="module.framework.sf_cellular_cat3.op3_name_format.numeric" display="Preferred Operator 3 Name Format" id="module.framework.sf_cellular_cat3.op3_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.op3_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.op3_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.op3_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="40424" display="Preferred Operator 4 Name" id="module.framework.sf_cellular_cat3.pref_op4_name">
		</property>
		<property default="module.framework.sf_cellular_cat3.op4_name_format.numeric" display="Preferred Operator 4 Name Format" id="module.framework.sf_cellular_cat3.op4_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.op4_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.op4_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.op4_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="40422" display="Preferred Operator 5 Name" id="module.framework.sf_cellular_cat3.pref_op5_name">
		</property>
		<property default="module.framework.sf_cellular_cat3.op5_name_format.numeric" display="Preferred Operator 5 Name Format" id="module.framework.sf_cellular_cat3.op5_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.op5_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.op5_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.op5_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="module.framework.sf_cellular_cat3.op_select_mode.auto" display="Operator Select Mode" id="module.framework.sf_cellular_cat3.op_select_mode">
			<option display="Auto" id="module.framework.sf_cellular_cat3.op_select_mode.auto" value="SF_CELLULAR_OP_SELECT_MODE_AUTO"/>
			<option display="Manual" id="module.framework.sf_cellular_cat3.op_select_mode.manual" value="SF_CELLULAR_OP_SELECT_MODE_MANUAL"/>
			<option display="Deregister" id="module.framework.sf_cellular_cat3.op_select_mode.deregister" value="SF_CELLULAR_OP_SELECT_MODE_DEREGISTER"/>
			<option display="Manual Fallback" id="module.framework.sf_cellular_cat3.op_select_mode.mannual_fallback" value="SF_CELLULAR_OP_SELECT_MODE_MANUAL_FALLBACK"/>
		</property>
		<property default="40422" display="Operator Name(Manual Mode Selection)" id="module.framework.sf_cellular_cat3.manual_op">
		</property>
		<property default="module.framework.sf_cellular_cat3.manual_op_name_format.numeric" display="Operator Name Format(Manual Mode Selection)" id="module.framework.sf_cellular_cat3.manual_op_name_format">
			<option display="Long" id="module.framework.sf_cellular_cat3.manual_op_name_format.long" value="SF_CELLULAR_OP_NAME_FORMAT_LONG"/>
			<option display="Short" id="module.framework.sf_cellular_cat3.manual_op_name_format.short" value="SF_CELLULAR_OP_NAME_FORMAT_SHORT"/>
			<option display="Numeric" id="module.framework.sf_cellular_cat3.manual_op_name_format.numeric" value="SF_CELLULAR_OP_NAME_FORMAT_NUMERIC"/>
		</property>
		<property default="module.framework.sf_cellular_cat3.tzupdatepolicy.enable" display="Time Zone Update Policy" id="module.framework.sf_cellular_cat3.tzupdatepolicy">
			<option display="Disabled" id="module.framework.sf_cellular_cat3.tzupdatepolicy.disable" value="SF_CELLULAR_TIMEZONE_UPDATE_AUTO_DISABLE"/>
			<option display="Enabled" id="module.framework.sf_cellular_cat3.tzupdatepolicy.enable" value="SF_CELLULAR_TIMEZONE_UPDATE_AUTO_ENABLE"/>
		</property>
		<property id="module.framework.sf_cellular_cat3.p_recv_callback" display="Receive Data Callback" default="sf_cellular_nsal_recv_callback">
            		<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_cat3.p_recv_callback}")</constraint>
        	</property>
		<property id="module.framework.sf_cellular_cat3.p_prov_callback" display="Provisioning Callback" default="celr_prov_callback">
            		<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_cat3.p_prov_callback}")</constraint>
        	</property>
		<property default="256" display="Circular Queue Size in Bytes" id="module.framework.sf_cellular_cat3.cq_size">
			<constraint display="Value must be multiple of 4 and must be greater than or equal to 256">
				testInteger("${module.framework.sf_cellular_cat3.cq_size}") &amp;&amp; 
				("${module.framework.sf_cellular_cat3.cq_size}" &gt; 255) &amp;&amp; 
				("${module.framework.sf_cellular_cat3.cq_size}" % 4 == 0)
			</constraint>
		</property>
		<property default="512" display="SF Communication Framework Thread Stack Size" id="module.framework.sf_cellular_cat3.sfcomms_thread_stack_size">
			<constraint display="Value must be multiple of 4 and must be greater than or equal to 512">
				testInteger("${module.framework.sf_cellular_cat3.sfcomms_thread_stack_size}") &amp;&amp; 
				("${module.framework.sf_cellular_cat3.sfcomms_thread_stack_size}" &gt; 511) &amp;&amp; 			
				("${module.framework.sf_cellular_cat3.sfcomms_thread_stack_size}" % 4 == 0)
			</constraint>
		</property>
		<property default="5" display="Numerical priority of SF Communication Framework Thread. Legal values range from 0 through (TX_MAX_PRIORITES-1), where a value of 0 represents the highest priority." id="module.framework.sf_cellular_cat3.sfcomms_thread_priority">
		</property>	
		<property default="g_sf_cellular_nsal_ppp0" id="module.framework.sf_cellular.ppp_name">
		</property>
		<property id="module.framework.sf_cellular_cat3.reset_pin" display="Cellular Module Reset IO Pin" default="IOPORT_PORT_10_PIN_05">
            		<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_cat3.reset_pin}")</constraint>
        	</property>
	<header>
		
		/** SF_CELLULAR on Nimbelink Cellular Driver instance */
		extern sf_cellular_instance_t ${module.framework.sf_cellular.name};

		/** Data Received Callback */
		#ifdef ${module.framework.sf_cellular_cat3.p_recv_callback}
		#define SF_CELLULAR_CAT3_RECV_CALLBACK_USED_${module.framework.sf_cellular.name} (0)
		#else
		#define SF_CELLULAR_CAT3_RECV_CALLBACK_USED_${module.framework.sf_cellular.name} (1)
		#endif
		#if SF_CELLULAR_CAT3_RECV_CALLBACK_USED_${module.framework.sf_cellular.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		void ${module.framework.sf_cellular_cat3.p_recv_callback}(sf_cellular_callback_args_t * p_args);
		#endif
		
		/** Provisioning Callback */
		#ifdef ${module.framework.sf_cellular_cat3.p_prov_callback}
		#define SF_CELLULAR_CAT3_PROV_CALLBACK_USED_${module.framework.sf_cellular.name} (0)
		#else
		#define SF_CELLULAR_CAT3_PROV_CALLBACK_USED_${module.framework.sf_cellular.name} (1)
		#endif
		#if SF_CELLULAR_CAT3_PROV_CALLBACK_USED_${module.framework.sf_cellular.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		ssp_err_t ${module.framework.sf_cellular_cat3.p_prov_callback}(sf_cellular_callback_args_t * p_args);
		#endif

		</header>
		<includes>
		#include &quot;tx_api.h&quot;
		#include &quot;sf_cellular_api.h&quot;
		#include &quot;sf_cellular_cat3.h&quot;
		#include &quot;sf_cellular_common.h&quot;
		#if !SF_CELLULAR_CAT3_CFG_ONCHIP_STACK_SUPPORT
		#include &quot;sf_cellular_nsal_api.h&quot;
		#endif
		</includes>
		<declarations>
static uint8_t ${module.framework.sf_cellular.name}_sfcomms_thread_stack[${module.framework.sf_cellular_cat3.sfcomms_thread_stack_size}] BSP_PLACE_IN_SECTION_V2(".stack.${module.framework.sf_cellular.name}_sfcomms_thread_stack") BSP_ALIGN_VARIABLE_V2(BSP_STACK_ALIGNMENT);
static uint32_t ${module.framework.sf_cellular.name}_cq_buffer[${module.framework.sf_cellular_cat3.cq_size}] BSP_PLACE_IN_SECTION_V2(".stack.${module.framework.sf_cellular.name}_cq_buffer") BSP_ALIGN_VARIABLE_V2(BSP_STACK_ALIGNMENT);

TX_QUEUE     ${module.framework.sf_cellular.name}_cq;
TX_SEMAPHORE ${module.framework.sf_cellular.name}_tx_sem;
TX_THREAD  	 ${module.framework.sf_cellular.name}_txid;
TX_MUTEX 	 ${module.framework.sf_cellular.name}_mutex;

/** Circular Queue Configuration */
sf_cellular_circular_queue_cfg_t   ${module.framework.sf_cellular.name}_cq_cfg =
{
 .p_circular_queue = &amp;${module.framework.sf_cellular.name}_cq,
 .p_circular_queue_buffer = ${module.framework.sf_cellular.name}_cq_buffer,
 .queue_size = ${module.framework.sf_cellular_cat3.cq_size},
 .p_tx_serial_recv_semaphore = &amp;${module.framework.sf_cellular.name}_tx_sem,
 .pending_rx_bytes = 0,
 .ok_check_index = 0
};

/** SF Communication Framework Configuration */
sf_cellular_comms_extend_cfg_t ${module.framework.sf_cellular.name}_sf_comms_cfg =
{ .p_sf_comms_instance = &amp;${module.framework.sf_cellular_cat3.requires.sf_comms::module.framework.sf_comms.name},
  .p_sf_comms_rx_thread = &amp;${module.framework.sf_cellular.name}_txid,
  .p_sf_comms_rx_thread_stack = ${module.framework.sf_cellular.name}_sfcomms_thread_stack,
  .sf_comms_rx_thread_stack_size = ${module.framework.sf_cellular_cat3.sfcomms_thread_stack_size},
  .rx_thread_priority = ${module.framework.sf_cellular_cat3.sfcomms_thread_priority},
  .do_run = SF_CELLULAR_FALSE
};

/** Extended configuration for CAT3 instance */
static const sf_cellular_extended_cfg_t ${module.framework.sf_cellular.name}_on_cat3_cfg =
{
  .p_circular_queue_cfg = &amp;${module.framework.sf_cellular.name}_cq_cfg,
  .p_cellular_mutex = &amp;${module.framework.sf_cellular.name}_mutex,
  .p_sf_comms_cfg = &amp;${module.framework.sf_cellular.name}_sf_comms_cfg,
  .pin_reset = ${module.framework.sf_cellular_cat3.reset_pin},
};

/** Cellular Framework Instance variable storing instance specific configuration */
static sf_cellular_instance_cfg_t ${module.framework.sf_cellular.name}_instance_cfg;

/** Cellular Framework control block */
static sf_cellular_ctrl_t ${module.framework.sf_cellular.name}_ctrl =
{ .p_driver_handle = &amp;${module.framework.sf_cellular.name}_instance_cfg };

static const sf_cellular_cfg_t ${module.framework.sf_cellular.name}_cfg =
{
	.p_sim_pin		= (uint8_t *)&quot;${module.framework.sf_cellular_cat3.sim_pin}&quot;,
	.p_puk_pin		= (uint8_t *)&quot;${module.framework.sf_cellular_cat3.sim_puk}&quot;,
    	.op_select_mode     	= ${module.framework.sf_cellular_cat3.op_select_mode},
	.op =
	{
		.op_name 	= &quot;${module.framework.sf_cellular_cat3.manual_op}&quot;,
		.op_name_format = ${module.framework.sf_cellular_cat3.manual_op_name_format}
	},
	.num_pref_ops		= ${module.framework.sf_cellular_cat3.num_pref_ops},
	.pref_ops		=
	{
		{
			.op_name	= &quot;${module.framework.sf_cellular_cat3.pref_op1_name}&quot;,
			.op_name_format = ${module.framework.sf_cellular_cat3.op1_name_format}
		},
		{
			.op_name	= &quot;${module.framework.sf_cellular_cat3.pref_op2_name}&quot;,
			.op_name_format = ${module.framework.sf_cellular_cat3.op2_name_format}
		},
		{
			.op_name	= &quot;${module.framework.sf_cellular_cat3.pref_op3_name}&quot;,
			.op_name_format = ${module.framework.sf_cellular_cat3.op3_name_format}
		},
		{
			.op_name	= &quot;${module.framework.sf_cellular_cat3.pref_op4_name}&quot;,
			.op_name_format = ${module.framework.sf_cellular_cat3.op4_name_format}
		},
		{
			.op_name	= &quot;${module.framework.sf_cellular_cat3.pref_op5_name}&quot;,
			.op_name_format = ${module.framework.sf_cellular_cat3.op5_name_format}
		},
	},
	.tz_upd_mode		= ${module.framework.sf_cellular_cat3.tzupdatepolicy},
#if SF_CELLULAR_CAT3_CFG_ONCHIP_STACK_SUPPORT
	.p_prov_callback	= NULL,
	.p_recv_callback	= NULL,
	.p_context		= NULL,
#else
	.p_recv_callback	= ${module.framework.sf_cellular_cat3.p_recv_callback},
	.p_prov_callback 	= ${module.framework.sf_cellular_cat3.p_prov_callback},
	.p_context		= &amp;${module.framework.sf_cellular.ppp_name},
#endif
    .p_extend       	= &amp;${module.framework.sf_cellular.name}_on_cat3_cfg,
	.p_cmd_set		    = g_sf_cellular_cat3_cmd_set
};

/* Instance structure to use this module. */
sf_cellular_instance_t ${module.framework.sf_cellular.name} = 
{
    .p_ctrl        = &amp;${module.framework.sf_cellular.name}_ctrl,
    .p_cfg         = &amp;${module.framework.sf_cellular.name}_cfg,
    .p_api         = &amp;g_sf_cellular_on_sf_cellular_cat3 
};

	</declarations>
	<init>
		ssp_err_t ssp_err_${module.framework.sf_cellular.name};
		ssp_err_${module.framework.sf_cellular.name} = ${module.framework.sf_cellular.name}.p_api->open(${module.framework.sf_cellular.name}.p_ctrl, ${module.framework.sf_cellular.name}.p_cfg);
		if (SSP_SUCCESS != ssp_err_${module.framework.sf_cellular.name})
		{
			while (1);
		}
    	</init>
   	</module>
</synergyModuleDescription>
