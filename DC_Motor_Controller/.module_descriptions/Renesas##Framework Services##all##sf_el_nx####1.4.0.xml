<?xml version="1.0" encoding="UTF-8"?>

<synergyModuleDescription>
    <config id="config.framework.sf_el_nx" path="ssp_cfg/framework/sf_el_nx_cfg.h" version="0">
        <property default="config.framework.sf_el_nx.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_el_nx.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
            <option display="Default (BSP)" id="config.driver.sf_audio_playback.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.framework.sf_el_nx.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_el_nx.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="IOPORT_PORT_09_PIN_03" display="Channel 0 Phy Reset Pin" id="config.framework.sf_el_nx.pin0" description="Specify the IOPORT symbol to use for the Channel 0 Phy Reset Pin. For example: IOPORT_PORT_09_PIN_03">
            <constraint display="Name must be a valid C symbol">testSymbol("${config.framework.sf_el_nx.pin0}")</constraint>
        </property>
        <property default="0x00002E09" display="Channel 0 MAC Address High Bits" id="config.framework.sf_el_nx.mach0" description="Specify the high bits of the MAC aadress for channel 0. Unused if MAC address change callback is provided.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.mach0}")  &amp;&amp; ("${config.framework.sf_el_nx.mach0}" &gt; 0)</constraint>
        </property>
        <property default="0x0A0076C7" display="Channel 0 MAC Address Low Bits" id="config.framework.sf_el_nx.macl0" description="Specify the high bits of the MAC aadress for channel 0. Unused if MAC address change callback is provided.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.macl0}")  &amp;&amp; ("${config.framework.sf_el_nx.macl0}" &gt; 0)</constraint>
        </property>
        <property default="IOPORT_PORT_07_PIN_06" display="Channel 1 Phy Reset Pin" id="config.framework.sf_el_nx.pin1" description="Specify the IOPORT symbol to use for the Channel 1 Phy Reset Pin. For example: IOPORT_PORT_07_PIN_06">
            <constraint display="Name must be a valid C symbol">testSymbol("${config.framework.sf_el_nx.pin1}")</constraint>
        </property>
        <property default="0x00002E09" display="Channel 1 MAC Address High Bits" id="config.framework.sf_el_nx.mach1" description="Specify the high bits of the MAC aadress for channel 1. Unused if MAC address change callback is provided.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.mach1}")  &amp;&amp; ("${config.framework.sf_el_nx.mach1}" &gt; 0)</constraint>
        </property>
        <property default="0x0A0076C8" display="Channel 1 MAC Address Low Bits" id="config.framework.sf_el_nx.macl1" description="Specify the low bits of the MAC aadress for channel 1. Unused if MAC address change callback is provided.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.macl1}")  &amp;&amp; ("${config.framework.sf_el_nx.macl1}" &gt; 0)</constraint>
        </property>
        <property default="8" display="Number of Receive Buffer Descriptors" id="config.framework.sf_el_nx.num_rx_desc" description="Specify the number of receive buffer descriptors.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.num_rx_desc}")  &amp;&amp; ("${config.framework.sf_el_nx.num_rx_desc}" &gt; 0)</constraint>
        </property>
        <property default="32" display="Number of Transmit Buffer Descriptors" id="config.framework.sf_el_nx.num_tx_desc" description="Specify the number of transmit buffer descriptors.">
            <constraint display="Value must be an integer greater than 0">testInteger("${config.framework.sf_el_nx.num_tx_desc}")  &amp;&amp; ("${config.framework.sf_el_nx.num_tx_desc}" &gt; 0)</constraint>
        </property>
        <property default="" display="Ethernet Interrupt Priority" id="config.framework.sf_el_nx.irq_ipl" description="Select the priority for the Ethernet Interrrupt.">
            <select enum="enum.mcu.nvic.priorities.mandatory" />
        </property>
        <property default="config.framework.sf_el_nx.monitor_method.polling" description="PHY Interrupt Requires LINKSTA Pin connection to PHY" display="Link status monitoring method" id="config.framework.sf_el_nx.monitor_method">
            <option display="PHY Interrupt (Uses LINKSTA Pin)" id="config.framework.sf_el_nx.monitor_method.interrupt" value="1"/>
            <option display="PHY Polling"  id="config.framework.sf_el_nx.monitor_method.polling"  value="0"/>
        </property> 
        <content>
            #define SF_EL_NX_COMMS_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_el_nx.param_checking_enable}
            /** Specify MAC address. */
            #define SF_EL_NX_CFG_ENET0_MAC_H ${config.framework.sf_el_nx.mach0}
            #define SF_EL_NX_CFG_ENET0_MAC_L ${config.framework.sf_el_nx.macl0}
            #define SF_EL_NX_CFG_ENET1_MAC_H ${config.framework.sf_el_nx.mach1}
            #define SF_EL_NX_CFG_ENET1_MAC_L ${config.framework.sf_el_nx.macl1}
            /** Specify reset pin. */
            #define SF_EL_NX_CFG_ENET0_RESET_PIN ${config.framework.sf_el_nx.pin0}
            #define SF_EL_NX_CFG_ENET1_RESET_PIN ${config.framework.sf_el_nx.pin1}
            /** Specify number of descriptors. */
            #define NUM_RX_DESC               (${config.framework.sf_el_nx.num_rx_desc})
            #define NUM_TX_DESC               (${config.framework.sf_el_nx.num_tx_desc})
            #define SF_EL_NX_CFG_IRQ_IPL      (${config.framework.sf_el_nx.irq_ipl})
            #define NX_IP_HARDWARE_INT_CALLBACK_ENABLED (${config.framework.sf_el_nx.monitor_method})
        </content>
    </config>
    <module config="config.framework.sf_el_nx" display="Framework|Networking|${module.framework.sf_el_nx.name} NetX Port ETHER on sf_el_nx" common="100" id="module.framework.sf_el_nx" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/sf_el_nx_Module_Guide_Resources">
        <constraint display="Module instances must have unique names">
            "${interface.framework.sf_el_nx.${module.framework.sf_el_nx.name}}" === "1"
        </constraint>
        <constraint display="Requires RMII Ethernet peripheral">
          "${interface.mcu.etherc_rmii.external}" === "1"
        </constraint>
        <requires visible="false" interface="interface.mcu.etherc_rmii.external" display="Requires RMII Ethernet peripheral"  />
        <requires interface="_rtos" />
        <provides interface="interface.framework.sf_el_nx" />
        <provides interface="interface.framework.sf_el_nx_on_sf_el_nx" />
        <provides interface="interface.framework.sf_el_nx.${module.framework.sf_el_nx.name}" />
        <property default="g_sf_el_nx" display="Name" id="module.framework.sf_el_nx.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_el_nx.name}")</constraint>
        </property>
        <property default="0" display="Channel" id="module.framework.sf_el_nx.channel" description="Specify the hardware channel.">
            <constraint display="Value must be an integer between 0 and 1">testInteger("${module.framework.sf_el_nx.channel}")  &amp;&amp; ("${module.framework.sf_el_nx.channel}" &gt;= 0) &amp;&amp; ("${module.framework.sf_el_nx.channel}" &lt;= 1)</constraint>
        </property>
        <property default="NULL" display="MAC address change callback" id="module.framework.sf_el_nx.mac_update_callback" description="A user callback function can be provided. If this callback function is provided, it will be called at link initialization to allow the user to specify the MAC address.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_el_nx.mac_update_callback}") </constraint>
        </property>
        <property default="NULL" display="Unknown packet receive Callback" id="module.framework.sf_el_nx.receive_callback" description="A user callback function can be provided. If this callback function is provided, it will be called from the interrupt service routine (ISR) when an unknown packet is received.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_el_nx.receive_callback}") </constraint>
        </property>
        <header>
            #ifndef ${module.framework.sf_el_nx.mac_update_callback}
            void ${module.framework.sf_el_nx.mac_update_callback}(nx_mac_address_t *p_mac_config);
            #endif
            #ifndef ${module.framework.sf_el_nx.receive_callback}
            void ${module.framework.sf_el_nx.receive_callback}(NX_PACKET *packet_ptr, USHORT packet_type);
            #endif
            VOID  nx_ether_driver_eth${module.framework.sf_el_nx.channel}(NX_IP_DRIVER *driver_req_ptr);
            extern VOID  (* ${module.framework.sf_el_nx.name})(NX_IP_DRIVER * driver_req_ptr);
        </header>
        <includes>
            #include "nx_api.h"
            #include "sf_el_nx_cfg.h"
            #include "../src/framework/sf_el_nx/nx_renesas_synergy.h"
        </includes>        
        <declarations>
            NX_REC nx_record${module.framework.sf_el_nx.channel};
            static NX_CALLBACK_REC ${module.framework.sf_el_nx.name}_callbacks =
            {
                .nx_ether_unknown_packet_receive_callback = ${module.framework.sf_el_nx.receive_callback},
                .nx_ether_mac_address_change_callback = ${module.framework.sf_el_nx.mac_update_callback},
            };
            static sf_el_nx_cfg_t sf_el_nx${module.framework.sf_el_nx.channel}_cfg =
            {
                .channel          = ${module.framework.sf_el_nx.channel},
                .nx_mac_address   = {
                    .nx_mac_address_h   =  SF_EL_NX_CFG_ENET${module.framework.sf_el_nx.channel}_MAC_H,
                    .nx_mac_address_l   =  SF_EL_NX_CFG_ENET${module.framework.sf_el_nx.channel}_MAC_L
                 },
                .p_callback_rec      = &amp;${module.framework.sf_el_nx.name}_callbacks,
                .etherc_ptr          = R_ETHERC${module.framework.sf_el_nx.channel},
                .edmac_ptr           = R_EDMAC${module.framework.sf_el_nx.channel},
            };
            #if SF_EL_NX_CFG_IRQ_IPL != BSP_IRQ_DISABLED
            #if !defined(SSP_SUPPRESS_ISR_${module.framework.sf_el_nx.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_EDMAC${module.framework.sf_el_nx.channel})
            SSP_VECTOR_DEFINE_CHAN(edmac_eint_isr, EDMAC, EINT, ${module.framework.sf_el_nx.channel});
            #endif
            #endif

            void  nx_ether_driver_eth${module.framework.sf_el_nx.channel}(NX_IP_DRIVER *driver_req_ptr)
            {
                nx_ether_driver(driver_req_ptr, &amp;nx_record${module.framework.sf_el_nx.channel}, &amp;sf_el_nx${module.framework.sf_el_nx.channel}_cfg);
            }

            /** Make user given name point to correct driver entry point. */
            VOID  (* ${module.framework.sf_el_nx.name})(NX_IP_DRIVER * driver_req_ptr) = nx_ether_driver_eth${module.framework.sf_el_nx.channel};
        </declarations>
    </module>
</synergyModuleDescription>
