<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_touch_ctsu_slider" path="ssp_cfg/framework/sf_touch_ctsu_slider_cfg.h" version="0">
        <property default="config.framework.sf_touch_ctsu_slider.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_touch_ctsu_slider.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
            <option display="Default (BSP)" id="config.driver.sf_touch_ctsu_slider.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.framework.sf_touch_ctsu_slider.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_touch_ctsu_slider.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="1" display="Number of Sliders/Wheels" id="config.framework.sf_touch_ctsu_slider.slider_count" description="Specify the number of sliders.">
            <constraint display="Value must be between 1 and 36 inclusive">testInteger("${config.framework.sf_touch_ctsu_slider.slider_count}")  &amp;&amp; ("${config.framework.sf_touch_ctsu_slider.slider_count}" &gt;= 1) &amp;&amp; ("${config.framework.sf_touch_ctsu_slider.slider_count}" &lt;= 36)</constraint>
        </property>
        <property default="config.framework.sf_touch_ctsu_slider.multi_touch_enable.enabled" display="Multi touch enable" id="config.framework.sf_touch_ctsu_slider.multi_touch_enable" description="Enable support for multi touch.">
            <option display="Enabled" id="config.framework.sf_touch_ctsu_slider.multi_touch_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_touch_ctsu_slider.multi_touch_enable.disabled" value="(0)"/>
        </property>
        <content>
		#define SF_TOUCH_CTSU_SLIDER_CFG_PARAM_CHECKING_ENABLE          ${config.framework.sf_touch_ctsu_slider.param_checking_enable}
        /** Specify the maximum number of sliders/wheels to be used */
        #define SF_TOUCH_CTSU_SLIDER_CFG_USER_SUPPORTED_SLIDERS         (${config.framework.sf_touch_ctsu_slider.slider_count})
        /** Multi touch enable or disable */
        #define SF_TOUCH_CTSU_SLIDER_CFG_MULTI_TOUCH_ENABLE             (${config.framework.sf_touch_ctsu_slider.multi_touch_enable})
		</content>
    </config>

    <module config="config.framework.sf_touch_ctsu_slider" display="Framework|Input|${module.framework.sf_touch_ctsu_slider.name} Cap Touch Slider/Wheel Framework on sf_touch_ctsu_slider" id="module.framework.sf_touch_ctsu_slider" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/sf_touch_ctsu_slider_Module_Guide_Resources">
        <constraint display="Unique name required for each instance">
            "${interface.framework.sf_touch_ctsu_slider.${module.framework.sf_touch_ctsu_slider.name}}" === "1"
        </constraint>
        <constraint display="Requires Capactive Touch Framework">
            testExists("${module.framework.sf_touch_ctsu_slider.requires.sf_touch_ctsu::module.framework.sf_touch_ctsu.name}")
        </constraint>
		<requires interface="_rtos" />
        <requires id="module.framework.sf_touch_ctsu_slider.requires.sf_touch_ctsu" interface ="interface.framework.sf_touch_ctsu" display="Add Capacitive Touch Framework">
            <override property="module.framework.sf_touch_ctsu.p_callback" value= "NULL"/>
        </requires>
        <provides interface="interface.framework.sf_touch_ctsu_slider" />
        <provides interface="interface.framework.sf_touch_ctsu_slider.${module.framework.sf_touch_ctsu_slider.name}" />
        <property default="g_sf_touch_slider${_instance}" display="Name" id="module.framework.sf_touch_ctsu_slider.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_ctsu_slider.name}")</constraint>
        </property>
        <property default="all_sliders" display="Slider/Wheel Configuration Structure Name (generated by Workbench)" id="module.framework.sf_touch_ctsu_slider.slider_cfg_name" description="Specify the name of the slider configuration structure generated by Capacitive Touch Workbench." >
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_ctsu_slider.slider_cfg_name}")</constraint>
        </property>
        <property id="module.framework.sf_touch_ctsu_slider.p_callback" display="Callback" default="g_slider_framework_user_callback" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_ctsu_slider.p_callback}")</constraint>
        </property>  
        <property default="sf_touch_slider_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_touch_ctsu_slider.init_function" description="Specify the name of the generated initialization function.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_touch_ctsu_slider.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_touch_ctsu_slider.init.enable" display="Auto Initialization" id="module.framework.sf_touch_ctsu_slider.init" description="Select if sf_touch_ctsu_slider will be initialized during startup.">
            <option display="Enable"  id="module.framework.sf_touch_ctsu_slider.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_touch_ctsu_slider.init.disable" value="0"/>
        </property>
    <header>
        /** SF Touch CTSU Slider/Wheel instance */
        extern sf_touch_ctsu_slider_instance_t ${module.framework.sf_touch_ctsu_slider.name};
        #ifndef ${module.framework.sf_touch_ctsu_slider.p_callback}
        /** Declaration of user callback function. This function MUST be defined in the user application.*/
        void ${module.framework.sf_touch_ctsu_slider.p_callback}(sf_touch_ctsu_slider_callback_args_t * p_args);
        #endif
        void ${module.framework.sf_touch_ctsu_slider.name}_err_callback(void * p_instance, void * p_data);
        void ${module.framework.sf_touch_ctsu_slider.init_function}(void);
    </header>
    <includes>
		#include &quot;sf_touch_ctsu_slider.h&quot;
		</includes>
    <declarations>
        #if defined(__ICCARM__)
        #define ${module.framework.sf_touch_ctsu_slider.name}_err_callback_WEAK_ATTRIBUTE
        #pragma weak ${module.framework.sf_touch_ctsu_slider.name}_err_callback  = ${module.framework.sf_touch_ctsu_slider.name}_err_callback_internal
        #elif defined(__GNUC__)
        #define ${module.framework.sf_touch_ctsu_slider.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.framework.sf_touch_ctsu_slider.name}_err_callback_internal")))
        #endif
        void ${module.framework.sf_touch_ctsu_slider.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_touch_ctsu_slider.name}_err_callback_WEAK_ATTRIBUTE;
        extern sf_slider_on_ctsu_cfg_t* ${module.framework.sf_touch_ctsu_slider.slider_cfg_name}[SF_TOUCH_CTSU_SLIDER_CFG_USER_SUPPORTED_SLIDERS];
		sf_touch_ctsu_slider_instance_ctrl_t ${module.framework.sf_touch_ctsu_slider.name}_ctrl;
		sf_touch_ctsu_slider_cfg_t ${module.framework.sf_touch_ctsu_slider.name}_cfg =
		{
			.p_lower_lvl_touch_framework    = &amp;${module.framework.sf_touch_ctsu_slider.requires.sf_touch_ctsu::module.framework.sf_touch_ctsu.name},
            .slider_count                   = SF_TOUCH_CTSU_SLIDER_CFG_USER_SUPPORTED_SLIDERS,
            .p_callback                     = ${module.framework.sf_touch_ctsu_slider.p_callback},
            .p_context                      = NULL,
			.p_extend                       = ${module.framework.sf_touch_ctsu_slider.slider_cfg_name},
		};

         sf_touch_ctsu_slider_instance_t ${module.framework.sf_touch_ctsu_slider.name} =
        {
            .p_ctrl = &amp;${module.framework.sf_touch_ctsu_slider.name}_ctrl,
            .p_cfg  = &amp;${module.framework.sf_touch_ctsu_slider.name}_cfg,
            .p_api  = &amp;g_sf_touch_ctsu_slider_on_sf_touch_ctsu,
        };
        /*******************************************************************************************************************//**
         * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
         *             with the prototype below.
         *             - void ${module.framework.sf_touch_ctsu_slider.name}_err_callback(void * p_instance, void * p_data)
         *
         * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
         **********************************************************************************************************************/
        void ${module.framework.sf_touch_ctsu_slider.name}_err_callback_internal(void * p_instance, void * p_data);
        void ${module.framework.sf_touch_ctsu_slider.name}_err_callback_internal(void * p_instance, void * p_data)
        {
           /** Suppress compiler warning for not using parameters. */
            SSP_PARAMETER_NOT_USED(p_instance);
            SSP_PARAMETER_NOT_USED(p_data);

           /** An error has occurred. Please check function arguments for more information. */
            BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
        }
        /*******************************************************************************************************************//**
        * @brief     Initialization function that the user can choose to have called automatically during thread entry.
        *            The user can call this function at a later time if desired using the prototype below.

        *            - void ${module.framework.sf_touch_ctsu_slider.init_function}(void)
        **********************************************************************************************************************/
        void ${module.framework.sf_touch_ctsu_slider.init_function}(void)
        {
            ssp_err_t ssp_err_${module.framework.sf_touch_ctsu_slider.name};
            ssp_err_${module.framework.sf_touch_ctsu_slider.name} = ${module.framework.sf_touch_ctsu_slider.name}.p_api->open(${module.framework.sf_touch_ctsu_slider.name}.p_ctrl, ${module.framework.sf_touch_ctsu_slider.name}.p_cfg);
            if (SSP_SUCCESS != ssp_err_${module.framework.sf_touch_ctsu_slider.name})
            {
                ${module.framework.sf_touch_ctsu_slider.name}_err_callback((void *)&amp;${module.framework.sf_touch_ctsu_slider.name},&amp;ssp_err_${module.framework.sf_touch_ctsu_slider.name});
            }
        }
	</declarations>
        <init>
            /** Call initialization function if user has selected to do so. */
            #if (${module.framework.sf_touch_ctsu_slider.init})
                ${module.framework.sf_touch_ctsu_slider.init_function}(); 
            #endif
        </init>
    </module>
</synergyModuleDescription>
