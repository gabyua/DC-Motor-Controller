<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
    <config id="config.el.nxd_mqtt_client" path="ssp_cfg/framework/el/nxd_mqtt_client_cfg.h" version="0">
        
        <property default="config.el.nxd_mqtt_client.param_checking_enable.bsp_default" display="Parameter Checking" id="config.el.nxd_mqtt_client.param_checking_enable">
            <option display="Default (BSP)" id="config.el.nxd_mqtt_client.param_checking_enable.bsp_default" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.el.nxd_mqtt_client.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.el.nxd_mqtt_client.param_checking_enable.disabled" value="(0)"/>
        </property>
        
        <property default="module.el.nxd_mqtt_client.secure.enable" display="NX Secure" id="module.el.nxd_mqtt_client.secure">
            <option display="Enable"  id="module.el.nxd_mqtt_client.secure.enable"  value="1"/>
            <option display="Disable" id="module.el.nxd_mqtt_client.secure.disable" value="0"/>
        </property>
        <property default="12" display="Topic Name Max Length" id="module.el.nxd_mqtt_client.mqtt_topic_max_length">
        </property>
        <property default="32" display="Message Max Length" id="module.el.nxd_mqtt_client.mqtt_msg_max_length">
        </property>
        <property default="1" display="Keepalive Timer Rate (s)" id="module.el.nxd_mqtt_client.mqtt_keepalive_timer_rate">
        </property>
        <property default="1" display="Ping Timeout Delay (s)" id="module.el.nxd_mqtt_client.mqtt_ping_timeout_delay">
        </property>
        <property default="0xFFFFFFFF" display="Socket Timeout (in timer ticks) " id="config.el.nxd_mqtt_client.mqtt_socket_timeout">
            <constraint display="Value must be a non-negative integer and greater than zero. The default value (0xFFFFFFFF) is wait forever">
            testInteger("${config.el.nxd_mqtt_client.mqtt_socket_timeout}") &amp;&amp; ("${config.el.nxd_mqtt_client.mqtt_socket_timeout}" &gt; 0) &amp;&amp; ("${config.el.nxd_mqtt_client.mqtt_socket_timeout}" &lt; 4294967296)
            </constraint>      
        </property>
        <content>
    
            /* Defined, this option removes the basic MQTT client error checking */
            #if ${config.el.nxd_mqtt_client.param_checking_enable}
            #define NX_DISABLE_ERROR_CHECKING
            #endif
            
            /* Enabling NX Secure Component within MQTT Client Instance */
            #if (${module.el.nxd_mqtt_client.secure})
            #ifndef NX_SECURE_ENABLE
            #define NX_SECURE_ENABLE
            #endif
            #endif
            
            /* Defines the time out in the TCP socket disconnect call when disconnecting from the MQTT server in timer ticks */
            #define NXD_MQTT_SOCKET_TIMEOUT (${config.el.nxd_mqtt_client.mqtt_socket_timeout})
            
            /* The maximum topic length (in bytes) the application is going to subscribe to */
            #define NXD_MQTT_MAX_TOPIC_NAME_LENGTH (${module.el.nxd_mqtt_client.mqtt_topic_max_length})
            
            /* The maximum message length (in bytes) the application is going to send or receive */
            #define NXD_MQTT_MAX_MESSAGE_LENGTH (${module.el.nxd_mqtt_client.mqtt_msg_max_length})
        
            /* The MQTT timer rate */
            #define NXD_MQTT_KEEPALIVE_TIMER_RATE (${module.el.nxd_mqtt_client.mqtt_keepalive_timer_rate} * TX_TIMER_TICKS_PER_SECOND)
            
            /* Time MQTT client waits for PINGRESP from the broker for after it sends out MQTT PINGREQ */
            #define NXD_MQTT_PING_TIMEOUT_DELAY (${module.el.nxd_mqtt_client.mqtt_ping_timeout_delay} * TX_TIMER_TICKS_PER_SECOND)

        </content>
    </config>
    <module config="config.el.nxd_mqtt_client" display="X-Ware|NetX Duo|Protocols|${module.el.nxd_mqtt_client.name} NetX Duo MQTT Client" id="module.el.nxd_mqtt_client" version="1">

        <constraint display="Module instances must have unique names">
            "${interface.el.nxd_mqtt_client.${module.el.nxd_mqtt_client.name}}" === "1"
        </constraint>
        <constraint display="Requires NetX Duo IP Instance">
            testExists("${module.el.nxd_mqtt_client.requires.nxd.ip::module.el.nx.ip.name}")
        </constraint>   
        <constraint display="Requires NetX Duo Packet Pool">
            testExists("${module.el.nxd_mqtt_client.requires.nxd.packet_pool::module.el.nx.packet_pool.name}")
        </constraint>           
        <constraint display="Requires NetX Duo TLS Common">
            ("${module.el.nxd_mqtt_client.secure}" === "module.el.nxd_mqtt_client.secure.disable") || (testExists("${module.el.nxd_mqtt_client.requires.el.nxd_tls_common::module.el.nxd_tls_common.name}"))
        </constraint> 
        
        <requires interface="_rtos" />
        <requires id="module.el.nxd_mqtt_client.requires.nxd.ip" interface="interface.el.nxd.ip" display="Add NetX Duo IP Instance" >
            <override property="module.el.nx.ip.tcp" value="module.el.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.el.nxd_mqtt_client.requires.nxd.packet_pool" interface="interface.el.nxd.packet_pool" display="Add NetX Duo Packet Pool" />
        <requires id="module.el.nxd_mqtt_client.requires.el.nxd_tls_common" interface="interface.el.nxd_tls_common" display="Add NetX Duo TLS Common [Optional]" find="false" />

        <!-- NetX Duo only -->
        <provides interface="interface.el.nxd_mqtt_client" />
        <provides interface="interface.el.nxd_mqtt_client.${module.el.nxd_mqtt_client.name}" />

        <property default="g_mqtt_client${_instance}" display="Name" id="module.el.nxd_mqtt_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd_mqtt_client.name}")</constraint>
        </property>

        <property default="mqtt_client_id_callback" display="Client ID Callback" id="module.el.nxd_mqtt_client.mqtt_client_id_callback">
        </property>

        <property default="12" display="Client ID Max Length" id="module.el.nxd_mqtt_client.mqtt_client_id_max_length">
        </property>

        <property default="4096" display="Client Thread Stack Size" id="module.el.nxd_mqtt_client.mqtt_stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 4">
            testInteger("${module.el.nxd_mqtt_client.mqtt_stack_size}")  &amp;&amp; (("${module.el.nxd_mqtt_client.mqtt_stack_size}" % 4) == 0) &amp;&amp; ("${module.el.nxd_mqtt_client.mqtt_stack_size}" &gt; 4)
            </constraint>
        </property> 

        <property default="1" display="Number of Messages to be stored in memory" id="module.el.nxd_mqtt_client.mqtt_client_memory">
            <constraint display="Value must be a non-negative integer and greater than zero">
            testInteger("${module.el.nxd_mqtt_client.mqtt_client_memory}") &amp;&amp; ("${module.el.nxd_mqtt_client.mqtt_client_memory}" &gt; 0)
            </constraint>
        </property>

        <property default="2" display="Client thread priority" id="module.el.nxd_mqtt_client.mqtt_client_priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.el.nxd_mqtt_client.mqtt_client_priority}")  &amp;&amp; ("${module.el.nxd_mqtt_client.mqtt_client_priority}" &gt;= 0)
            </constraint>
        </property>     

        <property default="mqtt_client_init${_instance}" display="Name of generated initialization function" id="module.el.nxd_mqtt_client.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd_mqtt_client.init_function}")</constraint>
        </property>

        <property default="module.el.nxd_mqtt_client.init.enable" display="Auto Initialization" id="module.el.nxd_mqtt_client.init">
            <option display="Enable"  id="module.el.nxd_mqtt_client.init.enable"  value="1"/>
            <option display="Disable" id="module.el.nxd_mqtt_client.init.disable" value="0"/>
        </property>
        
        <header>
            extern NXD_MQTT_CLIENT  ${module.el.nxd_mqtt_client.name};
            
            /** MQTT CLIENT ID Callback */
            #ifdef ${module.el.nxd_mqtt_client.mqtt_client_id_callback}
            #define NXD_MQTT_CLIENT_ID_CALLBACK_USED_${module.el.nxd_mqtt_client.name} (0)
            #else
            #define NXD_MQTT_CLIENT_ID_CALLBACK_USED_${module.el.nxd_mqtt_client.name} (1)
            #endif
            #if NXD_MQTT_CLIENT_ID_CALLBACK_USED_${module.el.nxd_mqtt_client.name}
            /** Declaration of user callback function. This function MUST be defined in the user application.*/
            extern void ${module.el.nxd_mqtt_client.mqtt_client_id_callback}( char * client_id, uint32_t * client_id_length );
            #endif
        
            void ${module.el.nxd_mqtt_client.name}_err_callback(void * p_instance, void * p_data);
            void ${module.el.nxd_mqtt_client.init_function}(void);
        </header>
        <includes>
            #include "nxd_mqtt_client.h"
        </includes>

        <declarations>
            NXD_MQTT_CLIENT  ${module.el.nxd_mqtt_client.name};
            #if defined(__ICCARM__)
            #define ${module.el.nxd_mqtt_client.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.el.nxd_mqtt_client.name}_err_callback  = ${module.el.nxd_mqtt_client.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.el.nxd_mqtt_client.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nxd_mqtt_client.name}_err_callback_internal")))
            #endif
            void ${module.el.nxd_mqtt_client.name}_err_callback(void * p_instance, void * p_data) ${module.el.nxd_mqtt_client.name}_err_callback_WEAK_ATTRIBUTE;
            /*******************************************************************************************************************//**
               * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function
               *             with the prototype below.
               *             - void ${module.el.nxd_mqtt_client.name}_err_callback(void * p_instance, void * p_data)
               *
               * @param[in]  p_instance arguments used to identify which instance caused the error 
               * @param[in]  p_data Callback arguments used to identify what error caused the callback.
             **********************************************************************************************************************/
            void ${module.el.nxd_mqtt_client.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.el.nxd_mqtt_client.name}_err_callback_internal(void * p_instance, void * p_data)
            {
              /** Suppress compiler warning for not using parameters. */
              SSP_PARAMETER_NOT_USED(p_instance);
              SSP_PARAMETER_NOT_USED(p_data);

              /** An error has occurred. Please check function arguments for more information. */
              BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }
            
            static UCHAR ${module.el.nxd_mqtt_client.name}_stack[${module.el.nxd_mqtt_client.mqtt_stack_size}];
            static UCHAR ${module.el.nxd_mqtt_client.name}_memory[${module.el.nxd_mqtt_client.mqtt_client_memory} * sizeof(MQTT_MESSAGE_BLOCK)];
            char ${module.el.nxd_mqtt_client.name}_client_id[${module.el.nxd_mqtt_client.mqtt_client_id_max_length}];
            /*******************************************************************************************************************//**
             * @brief     Initialization function that the user can choose to have called automatically during thread entry.
             *            The user can call this function at a later time if desired using the prototype below.
             *            - void ${module.el.nxd_mqtt_client.init_function}(void)
             **********************************************************************************************************************/            
            void ${module.el.nxd_mqtt_client.init_function}(void)
            {
                UINT ${module.el.nxd_mqtt_client.name}_err;
                uint32_t mqtt_client_id_len = 0;

                #if NXD_MQTT_CLIENT_ID_CALLBACK_USED_${module.el.nxd_mqtt_client.name}
                /** Declaration of user callback function. This function MUST be defined in the user application.*/
                 ${module.el.nxd_mqtt_client.mqtt_client_id_callback}( ${module.el.nxd_mqtt_client.name}_client_id, &amp;mqtt_client_id_len );
                #endif                

                /* Create MQTT client. */
                ${module.el.nxd_mqtt_client.name}_err = nxd_mqtt_client_create(&amp;${module.el.nxd_mqtt_client.name}, "${module.el.nxd_mqtt_client.name} MQTT Client",
                                                                               ${module.el.nxd_mqtt_client.name}_client_id, mqtt_client_id_len,
                                                                               &amp;${module.el.nxd_mqtt_client.requires.nxd.ip::module.el.nx.ip.name},
                                                                               &amp;${module.el.nxd_mqtt_client.requires.nxd.packet_pool::module.el.nx.packet_pool.name},
                                                                               (VOID*)${module.el.nxd_mqtt_client.name}_stack, ${module.el.nxd_mqtt_client.mqtt_stack_size},
                                                                                ${module.el.nxd_mqtt_client.mqtt_client_priority},
                                                                               (UCHAR*)${module.el.nxd_mqtt_client.name}_memory, sizeof(${module.el.nxd_mqtt_client.name}_memory));

                if (NX_SUCCESS != ${module.el.nxd_mqtt_client.name}_err)
                {
                    ${module.el.nxd_mqtt_client.name}_err_callback((void *)&amp;${module.el.nxd_mqtt_client.name},&amp;${module.el.nxd_mqtt_client.name}_err);
                }
            }

        </declarations>
        <init>
            /** Call initialization function if user has selected to do so. */
            #if (${module.el.nxd_mqtt_client.init})
                ${module.el.nxd_mqtt_client.init_function}();
            #endif
        </init>
    </module>
</synergyModuleDescription>
