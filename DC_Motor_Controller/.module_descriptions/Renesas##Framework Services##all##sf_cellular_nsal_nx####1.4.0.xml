<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.framework.sf_cellular_nsal_nx" path="ssp_cfg/framework/sf_cellular_nsal_nx_cfg.h" version="0">
		<property default="config.framework.sf_cellular_nsal_nx.param_checking_enable.bsp" display="Parameter Checking" id="module.framework.sf_cellular_nsal_nx.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
			<option display="Default (BSP)" id="config.framework.sf_cellular_nsal_nx.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="module.framework.sf_cellular_nsal_nx.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="module.framework.sf_cellular_nsal_nx.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>
		/** Define Parameter checking */
		#ifndef SF_CELLULAR_NSAL_NX_CFG_PARAM_CHECKING_ENABLE
		#define SF_CELLULAR_NSAL_NX_CFG_PARAM_CHECKING_ENABLE ${module.framework.sf_cellular_nsal_nx.param_checking_enable}
		#endif
		</content>
	</config>
	<module config="config.framework.sf_cellular_nsal_nx" display="Framework|Networking|Cellular|${module.framework.sf_el_nx.name} NetX Port using Cellular Framework on sf_cellular_nsal_nx" id="module.framework.sf_cellular_nsal_nx" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/sf_cellular_nsal_nx_Module_Guide_Resources">
		<constraint display="Module instances must have unique names">
			"${interface.framework.sf_el_nx.${module.framework.sf_el_nx.name}}" === "1"
		</constraint>
		<requires interface="_rtos" />
		<requires id="module.framework.sf_cellular_nsal_nx.requires.nx_ppp_common" interface="interface.el.nx_ppp_common" display="Add NetX PPP Common" />
		<requires id="module.framework.sf_cellular_nsal_nx.requires.sf_cellular" interface="interface.framework.sf_cellular" display="Add Cellular Framework" >
			<override property="module.framework.sf_cellular.ppp_name" value="${module.framework.sf_cellular_nsal_nx.ppp_name}" />
			<override property="module.framework.sf_cellular_cat3.p_recv_callback" value="sf_cellular_nsal_recv_callback" />
		</requires>
		<requires id="module.framework.sf_cellular_nsal_nx.requires.ppp_packet_pool" interface="interface.el.nx.packet_pool" display="Add NetX Packet Pool for internal operation" />
		<provides interface="interface.framework.sf_cellular_nsal" />
        <provides interface="interface.framework.sf_el_nx" />
		<provides interface="interface.framework.sf_el_nx_on_sf_cellular_nsal" />
		<provides interface="interface.framework.sf_el_nx.${module.framework.sf_el_nx.name}" />
		<property default="g_sf_el_nx${_instance}" display="Name" id="module.framework.sf_el_nx.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_el_nx.name}")</constraint>
        </property>
		<property default="2048" display="PPP Stack Size in Bytes" id="module.framework.sf_cellular_nsal_nx.ppp_stack_size" description="Specify the stack size for the PPP thread in bytes.">
            <constraint display="Value must be a non-negative integer and divisible by 4">
                testInteger("${module.framework.sf_cellular_nsal_nx.ppp_stack_size}")  &amp;&amp; (("${module.framework.sf_cellular_nsal_nx.ppp_stack_size}" % 4) == 0)
            </constraint>
        </property>
       	<property default="g_nx_ppp${_instance}" display="Name" id="module.framework.sf_cellular_nsal_nx.ppp_name" description="PPP module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.ppp_name}")</constraint>
        </property>
	    <property default="3" display="Numerical priority of PPP Thread" id="module.framework.sf_cellular_nsal_nx.priority" description="Specify the PPP thread priority. The priority must be lower than IP Helper thread. Legal values range from 0 through (TX_MAX_PRIORITES-1), where a value of 0 represents the highest priority.">
        </property>
		<property default="None" display="Authentication Method" id="module.framework.sf_cellular_nsal_nx.auth_type" description="Select the authentication type.">
        	<option display="None" id="config.framework.sf_cellular_nsal_nx.auth_type.none" value="SF_CELLULAR_AUTH_TYPE_NONE"/>
			<option display="PAP" id="module.framework.sf_cellular_nsal_nx.auth_type.pap" value="SF_CELLULAR_AUTH_TYPE_PAP"/>
			<option display="CHAP" id="module.framework.sf_cellular_nsal_nx.auth_type.chap" value="SF_CELLULAR_AUTH_TYPE_CHAP"/>
		</property>
		<property id="module.framework.sf_cellular_nsal_nx.p_invalid_pkt_callback" display="Invalid Packet Handler Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_invalid_pkt_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_link_down_callback" display="Link Down Callback" default="ppp_link_down_callback" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_link_down_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_link_up_callback" display="Link UP Callback" default="ppp_link_up_callback" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_link_up_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_pap_generate_login_callback" display="PAP Login Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_pap_generate_login_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_pap_verify_login_callback" display="PAP Verify Login Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_pap_verify_login_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_get_challenge_values_callback" display="Get Challenge Values Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_get_challenge_values_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_get_responder_values_callback" display="Get Responder Values Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_get_responder_values_callback}")</constraint>
        </property>
		<property id="module.framework.sf_cellular_nsal_nx.p_get_verification_callback" display="Get Verification Callback" default="NULL" description="A user callback function can be provided.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_nsal_nx.p_get_verification_callback}")</constraint>
        </property>
		<property default="0,0,0,0" display="Local IPv4 Address (use commas for separation)" id="module.framework.sf_cellular_nsal_nx.local_ip" description="Specify the local IPv4 address. Separate each octect by a comma. Example: 192,168,0,1">
            <constraint display="Must be valid IP address separated by commas">"${module.framework.sf_cellular_nsal_nx.local_ip}".split(",").length == 4</constraint>
        </property>
        <property default="0,0,0,0" display="Peer IPv4 Address (use commas for separation)" id="module.framework.sf_cellular_nsal_nx.peer_ip" description="Specify the peer IPv4 address. Separate each octect by a comma. Example: 192,168,0,1">
            <constraint display="Must be valid IP address separated by commas">"${module.framework.sf_cellular_nsal_nx.peer_ip}".split(",").length == 4</constraint>
        </property>
		<header>
			extern NX_PACKET_POOL ${module.framework.sf_cellular_nsal_nx.requires.packet_pool::module.el.nx.packet_pool.name};
			extern NX_PPP ${module.framework.sf_cellular_nsal_nx.ppp_name};
			VOID ${module.framework.sf_el_nx.name}_send_byte(uint8_t data);
			VOID ${module.framework.sf_el_nx.name}(NX_IP_DRIVER * p_driver);
			VOID ${module.framework.sf_el_nx.name}_invalid_pkt_handle(NX_PACKET * p_packet_ptr);

		/** Invalid Packet Notification Callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_invalid_pkt_callback}
		#define SF_CELLULAR_NSAL_INVALID_PKT_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_INVALID_PKT_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_INVALID_PKT_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		void ${module.framework.sf_cellular_nsal_nx.p_invalid_pkt_callback}(NX_PACKET * p_pkt);
		#else
		VOID ${module.framework.sf_el_nx.name}_invalid_pkt_handle(NX_PACKET * p_pkt);
		#endif
		
		/** Link Down Notification Callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_link_down_callback}
		#define SF_CELLULAR_NSAL_LINK_DOWN_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_LINK_DOWN_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_LINK_DOWN_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		void ${module.framework.sf_cellular_nsal_nx.p_link_down_callback}(NX_PPP * ppp_ptr);
		#endif

		/** Link Up Notification Callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_link_up_callback}
		#define SF_CELLULAR_NSAL_LINK_UP_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_LINK_UP_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_LINK_UP_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		void ${module.framework.sf_cellular_nsal_nx.p_link_up_callback}(NX_PPP * ppp_ptr);
		#endif

		/** PAP Login Generate callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_pap_generate_login_callback}
		#define SF_CELLULAR_NSAL_PAP_LOGIN_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_PAP_LOGIN_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_PAP_LOGIN_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		UINT ${module.framework.sf_cellular_nsal_nx.p_pap_generate_login_callback}(CHAR *name, CHAR *password);
		#endif

		/** PAP Login Verify callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_pap_verify_login_callback}
		#define SF_CELLULAR_NSAL_PAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_PAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_PAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		UINT ${module.framework.sf_cellular_nsal_nx.p_pap_verify_login_callback}(CHAR *name, CHAR *password);
		#endif

		/** CHAP Challenge callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_get_challenge_values_callback}
		#define SF_CELLULAR_NSAL_CHAP_CHALLENGE_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_CHAP_CHALLENGE_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_CHAP_CHALLENGE_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		UINT ${module.framework.sf_cellular_nsal_nx.p_get_challenge_values_callback}(CHAR *rand_value,CHAR *id,CHAR *name);
		#endif


		/** CHAP Response callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_get_responder_values_callback}
		#define SF_CELLULAR_NSAL_CHAP_RESPONSE_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_CHAP_RESPONSE_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_CHAP_RESPONSE_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		UINT ${module.framework.sf_cellular_nsal_nx.p_get_responder_values_callback}(CHAR *system,CHAR *name,CHAR *secret);
		#endif


		/** CHAP Verification callback */
		#ifdef ${module.framework.sf_cellular_nsal_nx.p_get_verification_callback}
		#define SF_CELLULAR_NSAL_CHAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name} (0)
		#else
		#define SF_CELLULAR_NSAL_CHAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name} (1)
		#endif
		#if SF_CELLULAR_NSAL_CHAP_VERIFY_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** Declaration of user callback function. This function MUST be defined in the user application.*/
		UINT ${module.framework.sf_cellular_nsal_nx.p_get_verification_callback}(CHAR *system,CHAR *name,CHAR *secret);
		#endif

		</header>
	<includes>#include &quot;nx_api.h&quot;
	#include &quot;nx_ppp.h&quot;
	#include &quot;sf_cellular_nsal_nx.h&quot;</includes>
	<declarations>
		uint8_t ${module.framework.sf_el_nx.name}_ppp_stack_memory[${module.framework.sf_cellular_nsal_nx.ppp_stack_size}];
		NX_PPP ${module.framework.sf_cellular_nsal_nx.ppp_name};
		
		sf_cellular_nsal_cfg_t ${module.framework.sf_el_nx.name}_nsal_cfg =
		{
			.p_ppp_stack 				= &amp;${module.framework.sf_el_nx.name}_ppp_stack_memory[0],
			.ppp_stack_size 			= ${module.framework.sf_cellular_nsal_nx.ppp_stack_size},
			.priority 				    = ${module.framework.sf_cellular_nsal_nx.priority},
			.p_ppp 					    = &amp;${module.framework.sf_cellular_nsal_nx.ppp_name},
			.p_ppp_packet_pool 			= &amp;${module.framework.sf_cellular_nsal_nx.requires.ppp_packet_pool::module.el.nx.packet_pool.name},
#if SF_CELLULAR_NSAL_INVALID_PKT_CALLBACK_USED_${module.framework.sf_el_nx.name}
			.p_ppp_invalid_packet_cb    = ${module.framework.sf_cellular_nsal_nx.p_invalid_pkt_callback},
#else
			.p_ppp_invalid_packet_cb    = ${module.framework.sf_el_nx.name}_invalid_pkt_handle,
#endif
			.p_link_down_cb				= ${module.framework.sf_cellular_nsal_nx.p_link_down_callback},
			.p_link_up_cb				= ${module.framework.sf_cellular_nsal_nx.p_link_up_callback},
			.auth_type				    = ${module.framework.sf_cellular_nsal_nx.auth_type},
			.p_chap_get_challenge_cb	= ${module.framework.sf_cellular_nsal_nx.p_get_challenge_values_callback},
			.p_chap_get_responder_cb	= ${module.framework.sf_cellular_nsal_nx.p_get_responder_values_callback},
			.p_chap_get_verify_cb		= ${module.framework.sf_cellular_nsal_nx.p_get_verification_callback},
			.p_pap_generate_login		= ${module.framework.sf_cellular_nsal_nx.p_pap_generate_login_callback},
			.p_pap_verify_login			= ${module.framework.sf_cellular_nsal_nx.p_pap_verify_login_callback},
			.p_ppp_send_byte			= ${module.framework.sf_el_nx.name}_send_byte,
			.local_ip				    = IP_ADDRESS(${module.framework.sf_cellular_nsal_nx.local_ip}),
			.peer_ip 				    = IP_ADDRESS(${module.framework.sf_cellular_nsal_nx.peer_ip})
		};
		
		/** NetX PPP driver data send function. */
		VOID ${module.framework.sf_el_nx.name}_send_byte(UCHAR data)
		{
			sf_cellular_nsal_ppp_send_byte(data, &amp;${module.framework.sf_cellular_nsal_nx.requires.sf_cellular::module.framework.sf_cellular.name});
		}

		/** NetX driver entry function. We will take what NetX gives and add on Cellular framework instance. */
		VOID ${module.framework.sf_el_nx.name}(NX_IP_DRIVER * p_driver)
		{
			sf_cellular_nsal_netx_driver (p_driver, &amp;${module.framework.sf_cellular_nsal_nx.requires.sf_cellular::module.framework.sf_cellular.name},
										&amp;${module.framework.sf_el_nx.name}_nsal_cfg);
		}
		
#if !SF_CELLULAR_NSAL_INVALID_PKT_CALLBACK_USED_${module.framework.sf_el_nx.name}
		/** NetX PPP Invalid packet handling function. We will take what NetX gives and add on Cellular framework instance. */
		VOID ${module.framework.sf_el_nx.name}_invalid_pkt_handle(NX_PACKET * p_packet_ptr)
		{
			sf_cellular_nsal_invalid_packet_handler(p_packet_ptr, &amp;${module.framework.sf_cellular_nsal_nx.requires.sf_cellular::module.framework.sf_cellular.name});
		}
#endif
		</declarations>
	</module>
</synergyModuleDescription>
