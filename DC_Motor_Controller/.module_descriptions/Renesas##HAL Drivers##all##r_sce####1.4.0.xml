<?xml version="1.0" ?>
<synergyModuleDescription>
    <!-- SCE periphheral configuration and module description -->
    <config id="config.driver.sce" path="ssp_cfg/driver/r_sce_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce" display="Driver|Crypto|${module.driver.sce.name} SCE COMMON Driver on r_sce" id="module.driver.sce" common="1" version="1">
    <provides interface="interface.driver.crypto"/>
    <provides interface="interface.driver.sce"/>
        <property default="g_sce" display="Name" id="module.driver.sce.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce.name}")
            </constraint>
        </property>
        <property display="Endian flag"
             id="module.driver.sce.endian_flag" 
             default="module.driver.sce.endian_flag.big_endian" >
            <option display="CRYPTO_WORD_ENDIAN_BIG" 
                    id="module.driver.sce.endian_flag.big_endian"
                    value="CRYPTO_WORD_ENDIAN_BIG"/>
            <option display="CRYPTO_WORD_ENDIAN_LITTLE" 
                    id="module.driver.sce.endian_flag.little_endian"
                    value="CRYPTO_WORD_ENDIAN_LITTLE"/>
        </property>
        <header>
            extern const crypto_instance_t ${module.driver.sce.name};
        </header>
        <includes>
            #include &quot;r_crypto_api.h&quot;
        </includes>
        <declarations>
            crypto_ctrl_t ${module.driver.sce.name}_ctrl;
            crypto_cfg_t  ${module.driver.sce.name}_cfg =  
            { .p_sce_long_plg_start_callback = NULL, 
              .p_sce_long_plg_end_callback   = NULL,
              .endian_flag = ${module.driver.sce.endian_flag}
            };            
            const crypto_instance_t ${module.driver.sce.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce.name}_cfg  ,
                  .p_api  = &amp;g_sce_crypto_api
            };
        </declarations>
        <init>
        </init>
    </module>

    <!-- random number generation configuration and module description -->
    <config id="config.driver.sce_trng" path="ssp_cfg/driver/r_sce_trng_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_trng" display="Driver|Crypto|${module.driver.sce_trng.name} TRNG Driver on r_sce_trng" id="module.driver.sce_trng" common="1" version="1">
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
        <provides interface="interface.driver.crypto.trng"/>
        <provides interface="interface.driver.sce_trng"/>
        <property default="g_sce_trng" display="Name" id="module.driver.sce_trng.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_trng.name}")</constraint>
        </property>
        <property default="2" display="Max. Attempts" id="module.driver.sce_trng.nattempts">
            <constraint display="Maximum number of attempts must be a positive integer">
                testInteger("${module.driver.sce_trng.nattempts}")
            </constraint>
        </property>
        <header>
            extern const trng_instance_t ${module.driver.sce_trng.name};
        </header>       
        <includes>
            #include &quot;r_trng_api.h&quot;
        </includes>
        <declarations>
            trng_ctrl_t ${module.driver.sce_trng.name}_ctrl;
            trng_cfg_t  ${module.driver.sce_trng.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api,
              .nattempts = ${module.driver.sce_trng.nattempts}
            };
            const trng_instance_t ${module.driver.sce_trng.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_trng.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_trng.name}_cfg  ,
                  .p_api  = &amp;g_trng_on_sce
            };
        </declarations>
        <init>
       </init>
    </module>

    <!-- AES configuration and module description -->
    <config id="config.driver.sce_aes" path="ssp_cfg/driver/r_sce_aes_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_aes" display="Driver|Crypto|${module.driver.sce_aes.name} AES Driver on r_sce_aes" id="module.driver.sce_aes" version="1">
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.aes"/>
        <property default="g_sce_aes_${_instance}" display="Name" id="module.driver.sce_aes.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_aes.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_aes.key_length" 
             default="module.driver.sce_aes.key_length.key128bit" >          
            <option display="128" 
                    id="module.driver.sce_aes.key_length.key128bit"
                    value="128"/>
            <option display="192" 
                    id="module.driver.sce_aes.key_length.key192bit"
                    value="192"/>
            <option display="256"
                    id="module.driver.sce_aes.key_length.key256bit"
                    value="256"/>
        </property>
        <property display="Chaining Mode" 
            id="module.driver.sce_aes.chaining_mode"
            default="module.driver.sce_aes.chaining_mode.cbc">
            <option display="ECB" 
                    id="module.driver.sce_aes.chaining_mode.ecb"
                    value="ecb"/>
            <option display="CBC" 
                    id="module.driver.sce_aes.chaining_mode.cbc"
                    value="cbc"/>
            <option display="CTR"
                    id="module.driver.sce_aes.chaining_mode.ctr"
                    value="ctr"/>
            <option display="GCM" 
                    id="module.driver.sce_aes.chaining_mode.gcm"
                    value="gcm"/>
            <option display="XTS" 
                    id="module.driver.sce_aes.chaining_mode.xts"
                    value="xts"/>
        </property>        
        <property display="Key Format"
             id="module.driver.sce_aes.key_format" 
             default="module.driver.sce_aes.key_format.plain_text" >
            <option display="Plain Text Key" 
                    id="module.driver.sce_aes.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key (Not available for S1 MCU Series)"
                    id="module.driver.sce_aes.key_format.wrapped"
                    value="Hrk"/>
        </property>
        <header>
            extern const aes_instance_t ${module.driver.sce_aes.name};
        </header>       
        <includes>
            #include &quot;r_aes_api.h&quot;
        </includes>
        <declarations>
            #if ( (${module.driver.sce_aes.key_length} == 192) &amp;&amp; !( defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9)  || defined(BSP_MCU_GROUP_S5D5)) )
            #error  "AES 192-bit Driver on SCE Feature not available for selected MCU"
            #endif
            #define ecb 100
            #define cbc 200
            #define ctr 300
            #define gcm 400
            #define xts 500
            #if ( (${module.driver.sce_aes.chaining_mode} == gcm) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "AES GCM Mode on SCE Feature not available for selected MCU"
            #endif
            #if ( (${module.driver.sce_aes.chaining_mode} == xts) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "AES XTS Mode on SCE Feature not available for selected MCU"
            #endif
            #if ( (${module.driver.sce_aes.key_length} == 192) &amp;&amp; (${module.driver.sce_aes.chaining_mode} == xts) )
            #error  "AES 192-bit XTS Mode unavailable"
            #endif
            #undef ecb
            #undef cbc
            #undef ctr
            #undef gcm
            #undef xts
            /* Wrapped key implementation not available for S1 MCU Series, 
             * report an error if Wrapped key format is chosen when using an S1 MCU series 
             */
            #define sceHrk 1000
            #if ( (sce${module.driver.sce_aes.key_format} == sceHrk) &amp;&amp; (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA)) )
            #error  "Wrapped key Feature not available for selected MCU"
            #endif
            #undef    sceHrk
            aes_ctrl_t ${module.driver.sce_aes.name}_ctrl;
            aes_cfg_t  ${module.driver.sce_aes.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const aes_instance_t ${module.driver.sce_aes.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_aes.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_aes.name}_cfg  ,
                  .p_api  = &amp;g_aes${module.driver.sce_aes.key_length}${module.driver.sce_aes.chaining_mode}_on_sce${module.driver.sce_aes.key_format}
            };
        </declarations>
        <init>
        </init>
    </module>

    <!-- Hash (message digest) driver configuration and module description -->
    <config id="config.driver.sce_hash" path="ssp_cfg/driver/r_sce_hash_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_hash" display="Driver|Crypto|${module.driver.sce_hash.name} HASH Driver on r_sce_hash" id="module.driver.sce_hash" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for HASH Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for HASH Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />
        <provides interface="interface.driver.crypto.hash"/>
        <provides interface="interface.driver.sce_hash"/>
        <property default="g_sce_hash_${_instance}" display="Name (for S7G2, S5D9, S5D5 devices only)" id="module.driver.sce_hash.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_hash.name}")
            </constraint>
        </property>
        <property display="Algorithm"
             id="module.driver.sce_hash.algorithm" 
             default="module.driver.sce_hash.algorithm.sha256" >          
            <option display="SHA1" 
                    id="module.driver.sce_hash.algorithm.sha1"
                    value="1"/>
            <option display="MD5" 
                    id="module.driver.sce_hash.algorithm.md5"
                    value="5"/>
            <option display="SHA224"
                    id="module.driver.sce_hash.algorithm.sha224"
                    value="224"/>
            <option display="SHA256"
                    id="module.driver.sce_hash.algorithm.sha256"
                    value="256"/>
        </property>
        <header>
            extern const hash_instance_t ${module.driver.sce_hash.name};
        </header>       
        <includes>
            #include &quot;r_hash_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5)
            hash_ctrl_t ${module.driver.sce_hash.name}_ctrl;
            hash_cfg_t  ${module.driver.sce_hash.name}_cfg =
            {
              .p_crypto_api  = &amp;g_sce_crypto_api
            };
            const hash_instance_t ${module.driver.sce_hash.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_hash.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_hash.name}_cfg  ,
                  #if (${module.driver.sce_hash.algorithm} == 1)
                  .p_api  = &amp;g_sha1_hash_on_sce
                  #elif (${module.driver.sce_hash.algorithm} == 5)
                  .p_api  = &amp;g_md5_hash_on_sce
                  #elif (${module.driver.sce_hash.algorithm} == 224)
                  .p_api  = &amp;g_sha256_hash_on_sce
                  #else
                  .p_api  = &amp;g_sha256_hash_on_sce
                  #endif
            };
        #else
            #error  "HASH Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- RSA configuration and module description -->
    <config id="config.driver.sce_rsa" path="ssp_cfg/driver/r_sce_rsa_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_rsa" display="Driver|Crypto|${module.driver.sce_rsa.name} RSA Driver on r_sce_rsa" id="module.driver.sce_rsa" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for RSA Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for RSA Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.rsa"/>
        <property default="g_sce_rsa_${_instance}" display="Name (for S7G2, S5D9, S5D5 devices only)" id="module.driver.sce_rsa.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_rsa.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_rsa.key_length" 
             default="module.driver.sce_rsa.key_length.key2048bit" >
            <option display="1024" 
                    id="module.driver.sce_rsa.key_length.key1024bit"
                    value="1024"/>
            <option display="2048"
                    id="module.driver.sce_rsa.key_length.key2048bit"
                    value="2048"/>
        </property>
        <property display="Key Format"
             id="module.driver.sce_rsa.key_format" 
             default="module.driver.sce_rsa.key_format.plain_text" >
            <option display="Plain Text Key" 
                    id="module.driver.sce_rsa.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key"
                    id="module.driver.sce_rsa.key_format.wrapped"
                    value="_hrk"/>
        </property>
        <header>
            extern const rsa_instance_t ${module.driver.sce_rsa.name};
        </header>       
        <includes>
            #include &quot;r_rsa_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5)
            rsa_ctrl_t ${module.driver.sce_rsa.name}_ctrl;
            rsa_cfg_t  ${module.driver.sce_rsa.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const rsa_instance_t ${module.driver.sce_rsa.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_rsa.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_rsa.name}_cfg  ,
                  .p_api  = &amp;g_rsa${module.driver.sce_rsa.key_length}_on_sce${module.driver.sce_rsa.key_format}
            };
        #else
            #error  "RSA Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>
    
    <!-- DSA configuration and module description -->
    <config id="config.driver.sce_dsa" path="ssp_cfg/driver/r_sce_dsa_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_dsa" display="Driver|Crypto|${module.driver.sce_dsa.name} DSA Driver on r_sce_dsa" id="module.driver.sce_dsa" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for DSA Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for DSA Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.dsa"/>
        <property default="g_sce_dsa_${_instance}" display="Name (for S7G2, S5D9, S5D5 devices only)" id="module.driver.sce_dsa.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_dsa.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_dsa.key_length" 
             default="module.driver.sce_dsa.key_length.key2048_256bit" >
            <option display="(1024, 160)" 
                    id="module.driver.sce_dsa.key_length.key1024_160bit"
                    value="1024_160"/>
            <option display="(2048, 224)"
                    id="module.driver.sce_dsa.key_length.key2048_224bit"
                    value="2048_224"/>
            <option display="(2048, 256)"
                    id="module.driver.sce_dsa.key_length.key2048_256bit"
                    value="2048_256"/>
        </property>
        <header>
            extern const dsa_instance_t ${module.driver.sce_dsa.name};
        </header>       
        <includes>
            #include &quot;r_dsa_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5)
            dsa_ctrl_t ${module.driver.sce_dsa.name}_ctrl;
            dsa_cfg_t  ${module.driver.sce_dsa.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const dsa_instance_t ${module.driver.sce_dsa.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_dsa.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_dsa.name}_cfg  ,
                  .p_api  = &amp;g_dsa${module.driver.sce_dsa.key_length}_on_sce
            };
        #else
            #error  "DSA Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>
    
    <!-- ARC4 configuration and module description -->
    <config id="config.driver.sce_arc4" path="ssp_cfg/driver/r_sce_arc4_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_arc4" display="Driver|Crypto|${module.driver.sce_arc4.name} ARC4 Driver on r_sce_arc4" id="module.driver.sce_arc4" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for ARC4 Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for ARC4 Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.arc4"/>
        <property default="g_sce_arc4_${_instance}" display="Name (for S7G2, S5D9, S5D5 devices only)" id="module.driver.sce_arc4.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_arc4.name}")
            </constraint>
        </property>
        <property default="0" display="Key Length in number of bytes" id="module.driver.sce_arc4.key_length" >
             <constraint display="Key Length must be an integer in the range [0,256] and must be a multple of 4">
                testInteger("${module.driver.sce_arc4.key_length}") &amp;&amp; (
                     ("${module.driver.sce_arc4.key_length}" &gt;= 0) &amp;&amp; ("${module.driver.sce_arc4.key_length}" &lt;= 256) &amp;&amp;
                     (("${module.driver.sce_arc4.key_length}" % 4) == 0) )
             </constraint>
        </property>
        <property default="g_arc4_${_instance}_key" display="Key Name, this symbol must be defined as uint8_t array type data in user code" id="module.driver.sce_arc4.key_address" >
             <constraint display="Key Name must be a valid C symbol">
                testSymbol("${module.driver.sce_arc4.key_address}")
             </constraint>
        </property>
        <header>
            extern const arc4_instance_t ${module.driver.sce_arc4.name};
        </header>       
        <includes>
            #include &quot;r_arc4_api.h&quot;
        </includes>
        <declarations>
            #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5)
                extern uint8_t ${module.driver.sce_arc4.key_address}[] ;
                arc4_ctrl_t ${module.driver.sce_arc4.name}_ctrl;
                arc4_cfg_t  ${module.driver.sce_arc4.name}_cfg =
                {
                  .p_crypto_api = &amp;g_sce_crypto_api,
                  .length       = ${module.driver.sce_arc4.key_length},
                  .p_key        = ${module.driver.sce_arc4.key_address} // the symbol ${module.driver.sce_arc4.key_address} should be defined in the user code
                };
                const arc4_instance_t ${module.driver.sce_arc4.name} =
                {
                  .p_ctrl = &amp;${module.driver.sce_arc4.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_arc4.name}_cfg  ,
                  .p_api  = &amp;g_arc4_on_sce
                };
            #else
               #error  "arc4 Driver on SCE Feature not available for selected MCU"
            #endif
        </declarations>
        <init>
        </init>
    </module>

    <!-- TDES configuration and module description -->
    <config id="config.driver.sce_tdes" path="ssp_cfg/driver/r_sce_tdes_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_tdes" display="Driver|Crypto|${module.driver.sce_tdes.name} TDES Driver on r_sce_tdes" id="module.driver.sce_tdes" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for TDES Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for TDES Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    <provides interface="interface.driver.crypto.tdes"/>
        <property default="g_sce_tdes_${_instance}" display="Name" id="module.driver.sce_tdes.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_tdes.name}")
            </constraint>
        </property>
        <property display="Chaining Mode" 
            id="module.driver.sce_tdes.chaining_mode"
            default="module.driver.sce_tdes.chaining_mode.cbc">
            <option display="ECB" 
                    id="module.driver.sce_tdes.chaining_mode.ecb"
                    value="ecb"/>
            <option display="CBC" 
                    id="module.driver.sce_tdes.chaining_mode.cbc"
                    value="cbc"/>
            <option display="CTR"
                    id="module.driver.sce_tdes.chaining_mode.ctr"
                    value="ctr"/>
        </property>        
        <header>
            extern const tdes_instance_t ${module.driver.sce_tdes.name};
        </header>       
        <includes>
            #include &quot;r_tdes_api.h&quot;
        </includes>
        <declarations>
            #if ( !( defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9)  || defined(BSP_MCU_GROUP_S5D5)) )
            #error  "TDES 192-bit Driver on SCE Feature not available for selected MCU"
            #endif
            tdes_ctrl_t ${module.driver.sce_tdes.name}_ctrl;
            tdes_cfg_t  ${module.driver.sce_tdes.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const tdes_instance_t ${module.driver.sce_tdes.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_tdes.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_tdes.name}_cfg  ,
                  .p_api  = &amp;g_tdes192${module.driver.sce_tdes.chaining_mode}_on_sce
            };
        </declarations>
        <init>
        </init>
    </module>
    <!-- ECC configuration and module description -->
    <config id="config.driver.sce_ecc" path="ssp_cfg/driver/r_sce_ecc_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_ecc" display="Driver|Crypto|${module.driver.sce_ecc.name} ECC Driver on r_sce_ecc" id="module.driver.sce_ecc" version="1">
        <!-- Begining of MCU specific SCE7 peripheral constraint for ECC Crypto module -->
        <constraint display="Requires sce7 peripheral">
          "${interface.mcu.sce7}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce7" visible="false" display="Requires sce7 peripheral" />
        <!-- End of MCU specific SCE7 peripheral constraint for ECC Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    
        <provides interface="interface.driver.crypto.ecc"/>
        <property default="g_sce_ecc_${_instance}" display="Name (for S7G2, S5D9, S5D5 devices only)" id="module.driver.sce_ecc.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_ecc.name}")
            </constraint>
        </property>
        <property display="Key Length"
             id="module.driver.sce_ecc.key_length" 
             default="module.driver.sce_ecc.key_length.key256bit" >
            <option display="192" 
                    id="module.driver.sce_ecc.key_length.key192bit"
                    value="192"/>
            <option display="256"
                    id="module.driver.sce_ecc.key_length.key256bit"
                    value="256"/>
        </property>
        <property display="Key Format"
             id="module.driver.sce_ecc.key_format" 
             default="module.driver.sce_ecc.key_format.plain_text" >
            <option display="Plain Text Key" 
                    id="module.driver.sce_ecc.key_format.plain_text"
                    value=""/>
            <option display="Wrapped Key"
                    id="module.driver.sce_ecc.key_format.wrapped"
                    value="_hrk"/>
        </property>
        <header>
            extern const ecc_instance_t ${module.driver.sce_ecc.name};
        </header>       
        <includes>
            #include &quot;r_ecc_api.h&quot;
        </includes>
        <declarations>
        #if defined(BSP_MCU_GROUP_S7G2) || defined(BSP_MCU_GROUP_S5D9) || defined(BSP_MCU_GROUP_S5D5)
            ecc_ctrl_t ${module.driver.sce_ecc.name}_ctrl;
            ecc_cfg_t  ${module.driver.sce_ecc.name}_cfg =
            {
              .p_crypto_api = &amp;g_sce_crypto_api
            };
            const ecc_instance_t ${module.driver.sce_ecc.name} =
            {
                  .p_ctrl = &amp;${module.driver.sce_ecc.name}_ctrl ,
                  .p_cfg  = &amp;${module.driver.sce_ecc.name}_cfg  ,
                  .p_api  = &amp;g_ecc${module.driver.sce_ecc.key_length}_on_sce${module.driver.sce_ecc.key_format}
            };
        #else
            #error  "ECC Driver on SCE Feature not available for selected MCU"
        #endif
        </declarations>
        <init>
        </init>
    </module>
    <!-- Key Installation configuration and module description -->
    <config id="config.driver.sce_key_installation" path="ssp_cfg/driver/r_sce_key_installation_cfg.h" version="0">
        <content></content>
    </config>        
    <module config="config.driver.sce_key_installation" display="Driver|Crypto|${module.driver.sce_key_installation.name} key_installation Driver on r_sce_key_installation" id="module.driver.sce_key_installation" version="1">
        <!-- Begining of MCU specific SCE peripheral constraint for Key Installation Crypto module -->
        <constraint display="Requires sce peripheral">
          "${interface.mcu.sce}" === "1"
        </constraint>
        <requires interface="interface.mcu.sce" visible="false" display="Requires sce peripheral" />
        <!-- End of MCU specific SCE peripheral constraint for Key Installation Crypto module -->
        <requires interface="interface.driver.crypto" display="Add SCE COMMON Driver" id="module.driver.sce" />    
		<provides interface="interface.driver.crypto.key_installation"/>
        <provides interface="interface.driver.sce_key_installation"/>
        <property default="g_sce_key_installation_${_instance}" display="Name (Not Supported for S1 Series MCUs)" id="module.driver.sce_key_installation.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.sce_key_installation.name}")
            </constraint>
        </property>
        <header>
            extern key_installation_instance_t ${module.driver.sce_key_installation.name};
        </header>       
        <includes>
            #include &quot;r_sce_key_installation.h&quot;
        </includes>
        <declarations>
            #if (defined(BSP_MCU_GROUP_S124) || defined(BSP_MCU_GROUP_S128) || defined(BSP_MCU_GROUP_S1JA))
            #error  "Key Installation not available for S1 Series MCUs"
            #else

            /* Control block for ${module.driver.sce_key_installation.name}. */
            key_installation_instance_ctrl_t ${module.driver.sce_key_installation.name}_ctrl;

            /* Configuration structure for ${module.driver.sce_key_installation.name}. */
            key_installation_cfg_t ${module.driver.sce_key_installation.name}_cfg =
            {
                .p_lower_lvl_crypto_api = &amp;g_sce_crypto_api, 
                .p_extend                  = NULL, 

            };
            /* Instance structure for ${module.driver.sce_key_installation.name}. */
            key_installation_instance_t ${module.driver.sce_key_installation.name} = 
            {
                .p_ctrl = &amp;${module.driver.sce_key_installation.name}_ctrl,
                .p_cfg  = &amp;${module.driver.sce_key_installation.name}_cfg,
                .p_api  = &amp;g_key_installation_on_sce
            };

         #endif
        </declarations>
        <init>
        </init>
    </module>
</synergyModuleDescription>
