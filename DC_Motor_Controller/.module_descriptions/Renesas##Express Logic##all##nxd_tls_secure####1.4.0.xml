<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>

    <module config="" display="X-Ware|NetX Duo|Protocols|${module.el.nxd.tls_dtls_session.name} NetX Duo TLS Session" id="module.el.nxd.tls_dtls_session" version="1">

        <constraint display="Requires NetX Duo TLS Common">
            testExists("${module.el.nxd.tls_dtls_session.requires.module.el.nxd_tls_common::module.el.nxd_tls_common.name}")
        </constraint>

        <requires interface="_rtos" />
        <requires id="module.el.nxd.tls_dtls_session.requires.module.el.nxd_tls_common" interface="interface.el.nxd_tls_common" display="Add NetX Duo TLS Common"/>

        <!-- NetX Duo only -->
        <provides interface="interface.el.nxd.tls_dtls_session"/>
        <provides interface="interface.el.nxd.tls_dtls_session.${module.el.nxd.tls_dtls_session.name}" />

        <property default="g_tls_session${_instance}" display="Name" id="module.el.nxd.tls_dtls_session.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd.tls_dtls_session.name}")</constraint>
        </property>

        <property default="4000" display="Meta data size" id="module.el.nxd.tls_dtls_session.meta_data_size">
            <constraint display="Must be a positive number">
                testInteger("${module.el.nxd.tls_dtls_session.meta_data_size}")  &amp;&amp; (("${module.el.nxd.tls_dtls_session.meta_data_size}" &gt;= 0)) 
            </constraint>
        </property>

        <property default="tls_crypto_methods${_instance}" id="module.el.nxd.tls_dtls_session.tls_method_instance">
        </property>

        <property default="tls_timestamp_callback${_instance}" display="Name of Timestamp Function" id="module.el.nxd.tls_dtls_session.timestamp_func">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd.tls_dtls_session.timestamp_func}")</constraint>
        </property>
        
        <property default="certificate_verification_callback${_instance}" display="Name of Certificate Verification Function" id="module.el.nxd.tls_dtls_session.cert_verf_func">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd.tls_dtls_session.cert_verf_func}")</constraint>
        </property>

        <property default="tls_dtls_session_init${_instance}" display="Name of generated initialization function" id="module.el.nxd.tls_dtls_session.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd.tls_dtls_session.init_function}")</constraint>
        </property>
        
        <property default="module.el.nxd.tls_dtls_session.auto_init.enable" display="Auto Init" id="module.el.nxd.tls_dtls_session.auto_init">
            <option display="Disable"  id="module.el.nxd.tls_dtls_session.auto_init.disable"  value="0"/>
            <option display="Enable" id="module.el.nxd.tls_dtls_session.auto_init.enable"  value="1"/>
        </property>
        
        <header>	
            extern NX_SECURE_TLS_SESSION  ${module.el.nxd.tls_dtls_session.name};
            void ${module.el.nxd.tls_dtls_session.name}_err_callback(void * p_instance, void * p_data);
            void ${module.el.nxd.tls_dtls_session.init_function}(NX_SECURE_TLS_SESSION *p_tls_session);
            
            /** TLS TIMESTAMP FUNCTION Callback */
            #ifdef ${module.el.nxd.tls_dtls_session.timestamp_func}
            #define NXD_TLS_TIMESTAMP_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name} (0)
            #else
            #define NXD_TLS_TIMESTAMP_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name} (1)
            #endif
            #if NXD_TLS_TIMESTAMP_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name}
            /* Add a timestamp function for time checking and timestamps in the TLS handshake. */
            /** Declaration of user callback function. This function MUST be defined in the user application.*/
            extern ULONG ${module.el.nxd.tls_dtls_session.timestamp_func}(void);
            #endif
            
            /** TLS TIMESTAMP FUNCTION Callback */
            #ifdef ${module.el.nxd.tls_dtls_session.cert_verf_func}
            #define NXD_TLS_CERT_VERIFICATION_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name} (0)
            #else
            #define NXD_TLS_CERT_VERIFICATION_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name} (1)
            #endif
            #if NXD_TLS_CERT_VERIFICATION_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name}
            /* Setup the callback invoked when TLS has a certificate it wants to verify so we can
                   do additional checks not done automatically by TLS. */
            /** Declaration of user callback function. This function MUST be defined in the user application.*/
            extern ULONG ${module.el.nxd.tls_dtls_session.cert_verf_func}(NX_SECURE_TLS_SESSION *session, NX_SECURE_X509_CERT* certificate);
            #endif
            
        </header>
        <includes>
            #include "nx_secure_tls_api.h"
        </includes>
        <declarations>

            NX_SECURE_TLS_SESSION  ${module.el.nxd.tls_dtls_session.name};

            #if defined(__ICCARM__)
            #define ${module.el.nxd.tls_dtls_session.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.el.nxd.tls_dtls_session.name}_err_callback  = ${module.el.nxd.tls_dtls_session.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.el.nxd.tls_dtls_session.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nxd.tls_dtls_session.name}_err_callback_internal")))
            #endif
            void ${module.el.nxd.tls_dtls_session.name}_err_callback(void * p_instance, void * p_data) ${module.el.nxd.tls_dtls_session.name}_err_callback_WEAK_ATTRIBUTE;
            /*******************************************************************************************************************//**
            * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function
            *             with the prototype below.
            *             - void ${module.el.nxd.tls_dtls_session.name}_err_callback(void * p_instance, void * p_data)
            *
            * @param[in]  p_instance arguments used to identify which instance caused the error 
            * @param[in]  p_data Callback arguments used to identify what error caused the callback.
            **********************************************************************************************************************/
            void ${module.el.nxd.tls_dtls_session.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.el.nxd.tls_dtls_session.name}_err_callback_internal(void * p_instance, void * p_data)
            {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

                /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }

            #ifdef NX_CRYPTO_ENGINE_SW
            extern const NX_SECURE_TLS_CRYPTO nx_crypto_tls_ciphers;
            #else
            extern const NX_SECURE_TLS_CRYPTO nx_crypto_tls_ciphers_synergys7;
            #endif

            /* See the documentation for nx_secure_tls_metadata_size_calculate to find the required size. */
            CHAR ${module.el.nxd.tls_dtls_session.name}_meta_data[${module.el.nxd.tls_dtls_session.meta_data_size}];
            /*******************************************************************************************************************//**
            * @brief     Initialization function that the user can choose to have called automatically during thread entry.
            *            The user can call this function at a later time if desired using the prototype below.
            *            - void ${module.el.nxd.tls_dtls_session.init_function}(NX_SECURE_TLS_SESSION *p_tls_session)
            **********************************************************************************************************************/  
            void ${module.el.nxd.tls_dtls_session.init_function}(NX_SECURE_TLS_SESSION *p_tls_session)
            {
                UINT ${module.el.nxd.tls_dtls_session.name}_err;
                /* Create TLS client. */



                ${module.el.nxd.tls_dtls_session.name}_err = nx_secure_tls_session_create(p_tls_session,
                #ifdef NX_CRYPTO_ENGINE_SW
                                                                              &amp; nx_crypto_tls_ciphers,
                #else
                                                                              &amp; nx_crypto_tls_ciphers_synergys7,
                #endif
                                                                              ${module.el.nxd.tls_dtls_session.name}_meta_data,
                                                                              sizeof(${module.el.nxd.tls_dtls_session.name}_meta_data));
                                                                              
                #if NXD_TLS_TIMESTAMP_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name}
                /* Add a timestamp function for time checking and timestamps in the TLS handshake. */
                /** Declaration of user callback function. This function MUST be defined in the user application.*/
                _nx_secure_tls_session_time_function_set(p_tls_session, ${module.el.nxd.tls_dtls_session.timestamp_func});
                #endif
            
                
                #if NXD_TLS_CERT_VERIFICATION_CALLBACK_USED_${module.el.nxd.tls_dtls_session.name}
                /* Setup the callback invoked when TLS has a certificate it wants to verify so we can
                   do additional checks not done automatically by TLS. */
                /** Declaration of user callback function. This function MUST be defined in the user application.*/   
                 _nx_secure_tls_session_certificate_callback_set(p_tls_session, ${module.el.nxd.tls_dtls_session.cert_verf_func});
                #endif                
                      
                if (NX_SUCCESS != ${module.el.nxd.tls_dtls_session.name}_err)
                {
                    ${module.el.nxd.tls_dtls_session.name}_err_callback((void *)p_tls_session,&amp;${module.el.nxd.tls_dtls_session.name}_err);
                }
            }


        </declarations>
        <init>
        /** Call initialization function if user has selected to do so. */
        #if (${module.el.nxd.tls_dtls_session.auto_init})
        ${module.el.nxd.tls_dtls_session.init_function}(&amp; ${module.el.nxd.tls_dtls_session.name});
        #endif
        </init>
    </module>

    <config id="config.el.nxd_tls_common" path="ssp_cfg/framework/el/nxd_tls_common_cfg.h" version="0">
        <property default="config.el.nxd.nxd_tls_common.crypto_engine.hw" display="Crypto Engine" id="config.el.nxd.nxd_tls_common.crypto_engine">
            <!-- option display="Software"  id="config.el.nxd.nxd_tls_common.crypto_engine.sw"  value="1"/ -->
            <option display="Hardware"  id="config.el.nxd.nxd_tls_common.crypto_engine.hw"  value="0"/>
        </property>

        <property default="config.el.nxd.nxd_tls_common.allow_self_signed_cert.Disable" display="Self Signed Certificates" id="config.el.nxd.nxd_tls_common.allow_self_signed_cert">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.allow_self_signed_cert.Enable" value="1"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.allow_self_signed_cert.Disable"  value="0"/>
        </property>

        <property default="config.el.nxd.nxd_tls_common.enable_psk_cipher.Disable" display="PSK Cipher Suite" id="config.el.nxd.nxd_tls_common.enable_psk_cipher">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.enable_psk_cipher.Enable" value="1"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.enable_psk_cipher.Disable"  value="0"/>
        </property>	

        <property default="config.el.nxd.nxd_tls_common.x509_strict_name_compare.Disable" display="X509 Strict Name Compare" id="config.el.nxd.nxd_tls_common.x509_strict_name_compare">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.x509_strict_name_compare.Enable" value="1"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.x509_strict_name_compare.Disable"  value="0"/>
        </property>

        <property default="config.el.nxd.nxd_tls_common.x509_extend_distinguished_name.Disable" display="X509 Extended Distinguished Names" id="config.el.nxd.nxd_tls_common.x509_extend_distinguished_name">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.x509_extend_distinguished_name.Enable" value="1"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.x509_extend_distinguished_name.Disable"  value="0"/>
        </property>

        <property default="config.el.nxd.nxd_tls_common.rsa_modulus_expected.b4096" display="Maximum RSA Modulus size (bits)" id="config.el.nxd.nxd_tls_common.rsa_modulus_expected">
            <option display="1024" id="config.el.nxd.nxd_tls_common.rsa_modulus_expected.b1024"  value="1024"/>
            <option display="2048" id="config.el.nxd.nxd_tls_common.rsa_modulus_expected.b2048"  value="2048"/>
            <option display="3072" id="config.el.nxd.nxd_tls_common.rsa_modulus_expected.b3072"  value="3072"/>
            <option display="4096" id="config.el.nxd.nxd_tls_common.rsa_modulus_expected.b4096"  value="4096"/>
        </property>		


        <!-- NX_SECURE_TLS_ENABLE_TLS_1_0 -->
        <property default="config.el.nxd.nxd_tls_common.enable_legacy_tls_v_10.Disable" display="TLS v1.0" id="config.el.nxd.nxd_tls_common.enable_legacy_tls_v_10">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.enable_legacy_tls_v_10.Enable" value="1"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.enable_legacy_tls_v_10.Disable"  value="0"/>
        </property>

        <!-- NX_SECURE_TLS_DISABLE_TLS_1_1 -->
        <property default="config.el.nxd.nxd_tls_common.disable_tls_v_1_1_mode.Disable" display="TLS v1.1" id="config.el.nxd.nxd_tls_common.disable_tls_v_1_1_mode">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.disable_tls_v_1_1_mode.Enable" value="0"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.disable_tls_v_1_1_mode.Disable"  value="1"/>
        </property>	


        <!-- NX_SECURE_TLS_SERVER_DISABLED -->
        <property default="config.el.nxd.nxd_tls_common.disable_server.Enable" display="Server Mode" id="config.el.nxd.nxd_tls_common.disable_server">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.disable_server.Enable" value="0"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.disable_server.Disable"  value="1"/>
        </property>	

        <!-- NX_SECURE_TLS_CLIENT_DISABLED -->
        <property default="config.el.nxd.nxd_tls_common.disable_client.Enable" display="Client Mode" id="config.el.nxd.nxd_tls_common.disable_client">
            <option display="Enable" id="config.el.nxd.nxd_tls_common.disable_client.Enable" value="0"/>
            <option display="Disable"  id="config.el.nxd.nxd_tls_common.disable_client.Disable"  value="1"/>
        </property>	

        <content>
            /* NX_SECURE_TLS_DISABLE_TLS_1_1 defines whether or not to disable TLS 1.1 protocol support.
            BY default TLS 1.1 is supported. */
            #if (${config.el.nxd.nxd_tls_common.disable_tls_v_1_1_mode})
            #define NX_SECURE_TLS_DISABLE_TLS_1_1
            #endif

            /* NX_SECURE_TLS_ENABLE_TLS_1_0 defines whether or not to enable TLS 1.0 protocol support.
            BY default TLS 1.0 is not supported. */		
            #if (${config.el.nxd.nxd_tls_common.enable_legacy_tls_v_10})
            #define NX_SECURE_TLS_ENABLE_TLS_1_0
            #endif

            /* Defines Maximum RSA Modulus Bits*/
            #ifndef NX_CRYPTO_MAX_RSA_MODULUS_SIZE
            #define NX_CRYPTO_MAX_RSA_MODULUS_SIZE				(${config.el.nxd.nxd_tls_common.rsa_modulus_expected}U)
            #endif

            /* Enables the optional X.509 Distinguished
            Name fields, at the expense of extra memory use for X.509 certificates.*/	
            #if (${config.el.nxd.nxd_tls_common.x509_extend_distinguished_name})
            #define NX_SECURE_X509_USE_EXTENDED_DISTINGUISHED_NAMES
            #endif

            /* Enables strict distinguished name comparison for X.509 certificates for certificate searching and verification*/
            #if (${config.el.nxd.nxd_tls_common.x509_strict_name_compare})
            #define NX_SECURE_X509_STRICT_NAME_COMPARE
            #endif
            
            /* NX_SECURE_ENABLE_PSK_CIPHERSUITES enables Pre-Shared Key.  By default
            this feature is not enabled. */
            #if (${config.el.nxd.nxd_tls_common.enable_psk_cipher})
            #define NX_SECURE_ENABLE_PSK_CIPHERSUITES
            #endif

            /* This option removes all TLS stack code related to TLS Server mode, reducing code and data usage */
            #if (${config.el.nxd.nxd_tls_common.disable_server})
            #define NX_SECURE_TLS_SERVER_DISABLED
            #endif

            /* This option removes all TLS stack code related to TLS Client mode, reducing code and data usage */
            #if (${config.el.nxd.nxd_tls_common.disable_client})
            #define NX_SECURE_TLS_CLIENT_DISABLED
            #endif

            /* This option allows TLS to accept self-signed certificates from a remote host. 
            Otherwise the certificate must be issued by a certificate in the trusted certificate store */
            #if (${config.el.nxd.nxd_tls_common.allow_self_signed_cert})
            #define NX_SECURE_ALLOW_SELF_SIGNED_CERTIFICATES
            #endif		
            
            /* This option specifies whether to use Software Crypto Engines or not */
            #if (${config.el.nxd.nxd_tls_common.crypto_engine})
            #define NX_CRYPTO_ENGINE_SW
            #endif
        </content>
    </config>   
    <module config="config.el.nxd_tls_common" display="X-Ware|NetX Duo|Protocols| NetX Duo TLS Common" id="module.el.nxd_tls_common" common="1" version="1">
		
		<constraint display="Requires NetX Duo Software Crypto Module">
			testExists("${module.el.nxd_tls_common.requires.module.el.nxd_crypto_generic::module.el.nxd_crypto_generic.name}")
		</constraint>	  
		
		<requires interface="_rtos" />
        <requires id="module.el.nxd_tls_common.requires.el.nxd_common"  interface="interface.el.nxd_common" display="Add NetX Duo Common "/>
		<requires id="module.el.nxd_tls_common.requires.module.el.nxd_crypto_generic"  interface="interface.el.nxd_crypto_generic" display="Add NetX Duo Software Crypto">
          
        </requires>
		
		<provides interface="interface.el.nxd_tls_common" />
        <property default="g_tls_common" id="module.el.nxd_tls_common.name">
            
        </property>
        <property default="nx_secure_common_init" display="Name of generated initialization function" id="module.el.nxd_tls_common.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nxd_tls_common.init_function}")</constraint>
        </property>
        <property default="module.el.nxd_tls_common.init.enable" display="Auto Initialization" id="module.el.nxd_tls_common.init">
            <option display="Enable"  id="module.el.nxd_tls_common.init.enable"  value="1"/>
            <option display="Disable" id="module.el.nxd_tls_common.init.disable" value="0"/>
        </property>
		
		<header>
			extern void sce_initialize(void);
			extern void nx_secure_tls_initialize(void);	
			extern void ${module.el.nxd_tls_common.init_function}(void);			
		</header>
        <includes>
			#include "nx_api.h"
        </includes>		
		<declarations>
			
            /*******************************************************************************************************************//**
             * @brief     Initialization function that the user can choose to have called automatically during thread entry.
             *            The user can call this function at a later time if desired using the prototype below.
             *            - void ${module.el.nxd_tls_common.init_function}(void)
             **********************************************************************************************************************/
			void ${module.el.nxd_tls_common.init_function}(void)
			{
			#ifndef	NX_CRYPTO_ENGINE_SW 
				/* Initialise secure crypto engine driver */			
				sce_initialize();
			#endif
			
			/* Initialises the various control data structures for the TLS component */
				nx_secure_tls_initialize();			
			}
        </declarations>		
		<init>
            /**  Call initialization function if user has selected to do so. */
            #if (${module.el.nxd_tls_common.init})
                ${module.el.nxd_tls_common.init_function}(); 
            #endif 
		</init>
		
    </module>
    
    <module display="X-Ware|NetX Duo|Protocols|${module.el.nxd_crypto_generic.name} NetX Duo Software Crypto" id="module.el.nxd_crypto_generic" common="1" version="1">   
        
        <requires interface="_rtos" />
        <requires id="module.el.nxd_crypto_generic.requires.module.framework.sf_el_nx_crypto"  interface="interface.framework.sf_el_nx_crypto" display="Add Hardware Accelerated Crypto" />

        <!-- NetX Duo only -->
        <provides interface="interface.el.nxd_crypto_generic" />
        <provides interface="interface.el.nxd_crypto_generic.${module.el.nxd_crypto_generic.name}" />
        
         <property default="g_crypto_generic" display="Name" id="module.el.nxd_crypto_generic.name">
            <constraint display="Name must be a valid C symbol">
                testSymbol("${module.driver.crypto_generic.name}")
            </constraint>
        </property>

        <header>
            /** Software based crypto ciphers for use with nx_secure_tls_session_create. */
            extern const NX_SECURE_TLS_CRYPTO nx_crypto_tls_ciphers;
        </header>
        
        <includes>
            #include "nx_secure_tls.h"
            #include "nx_secure_tls_api.h"
        </includes>
        

    </module>
</synergyModuleDescription>