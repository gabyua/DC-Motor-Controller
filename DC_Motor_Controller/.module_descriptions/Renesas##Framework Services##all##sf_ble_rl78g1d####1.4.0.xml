<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
	<!-- RL78G1D BLE GATT/GAP XML START here-->
	<config id="config.framework.sf_ble_rl78g1d" path="ssp_cfg/framework/sf_ble_rl78g1d_cfg.h" version="0">
		<property default="config.framework.sf_ble_rl78g1d.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_ble_rl78g1d.param_checking_enable">
			<option display="Default (BSP)" id="config.framework.sf_ble_rl78g1d.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.framework.sf_ble_rl78g1d.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.framework.sf_ble_rl78g1d.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>
		/** Configuration to enable Parameter Checking */
		#ifndef SF_BLE_RL78G1D_CFG_PARAM_CHECKING_ENABLE
		#define SF_BLE_RL78G1D_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_ble_rl78g1d.param_checking_enable}
		#endif
		</content>
	</config>
	<module config="config.framework.sf_ble_rl78g1d" display="Framework|Networking|BLE|${module.framework.sf_ble_rl78g1d.name} RL78G1D BLE GAP and GATT on sf_ble_rl78g1d" id="module.framework.sf_ble_rl78g1d" version="1">
		<constraint display="Module instances must have unique names">
			"${interface.framework.sf_ble_rl78g1d.${module.framework.sf_ble_rl78g1d.name}}" === "1"
		</constraint>
		<requires interface="_rtos" />
		<requires id="module.framework.sf_ble_rl78g1d.requires.sf_comms" interface="interface.framework.sf_comms" display="Add Communication Framework"/>
        <requires id="module.framework.sf_ble_rl78g1d.requires.timer_on_gpt" interface="interface.driver.timer_on_gpt" display="Add Timer Driver">
			<override property="module.driver.timer.gtioca_output_enabled" value= "module.driver.timer.gtioca_output_enabled.false"/>
			<override property="module.driver.timer.gtioca_stop_level" value= "module.driver.timer.gtioca_stop_level.pin_level_low"/>
			<override property="module.driver.timer.gtiocb_output_enabled" value= "module.driver.timer.gtiocb_output_enabled.false"/>
			<override property="module.driver.timer.gtiocb_stop_level" value= "module.driver.timer.gtiocb_stop_level.pin_level_low"/>
			<override property="module.driver.timer.mode" value= "module.driver.timer.mode.mode_periodic"/>
			<override property="module.driver.timer.period" value= "10"/>
			<override property="module.driver.timer.unit" value= "module.driver.timer.unit.unit_period_msec"/>
			<override property="module.driver.timer.duty_cycle" value= "50"/>
			<override property="module.driver.timer.duty_cycle_unit" value= "module.driver.timer.duty_cycle_unit.unit_raw_counts"/>
			<override property="module.driver.timer.autostart" value= "module.driver.timer.autostart.true"/>
			<override property="module.driver.timer.p_callback" value= "RBLE_Timer_cb"/>
		</requires>
		<provides interface="interface.framework.sf_ble_rl78g1d"/>
		<provides interface="interface.framework.sf_ble_rl78g1d.${module.framework.sf_ble_rl78g1d.name}" />
		<provides interface="interface.framework.sf_ble_rl78g1d.${module.framework.sf_ble_rl78g1d.name}" />
		<provides interface="interface.framework.sf_ble_rl78g1d_onboard_profile" />
		<property default="g_sf_ble${_instance}" display="Name" id="module.framework.sf_ble_rl78g1d.name">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_ble_rl78g1d.name}")</constraint>
		</property>
		<property default="{ 0x0,0x0,0x0,0x0,0x0,0x0 }" display="Bluetooth Device Address(Restart Board after first run to see changed Address)" id="module.framework.sf_ble_rl78g1d.bd_addr"/>
		<property default="module.framework.sf_ble_rl78g1d.own_addr_type.public" display="Address Type" id="module.framework.sf_ble_rl78g1d.own_addr_type">
			<option display="Public Address" id="module.framework.sf_ble_rl78g1d.own_addr_type.public" value="SF_BLE_ADDR_TYPE_PUBLIC"/>
			<option display="Random Address" id="module.framework.sf_ble_rl78g1d.own_addr_type.random" value="SF_BLE_ADDR_TYPE_RANDOM"/>
		</property>		
		<property default="48" display="Scan Interval" id="module.framework.sf_ble_rl78g1d.scan_interval">
			<constraint display="Value must be in range 4 to 16384">
                testInteger("${module.framework.sf_ble_rl78g1d.scan_interval}") &amp;&amp; ("${module.framework.sf_ble_rl78g1d.scan_interval}" &gt; 3) &amp;&amp; ("${module.framework.sf_ble_rl78g1d.scan_interval}" &lt; 16385)
            </constraint>
		</property>
		<property default="48" display="Scan Window" id="module.framework.sf_ble_rl78g1d.scan_window">
			<constraint display="Value must be in range 4 to 16384">
                testInteger("${module.framework.sf_ble_rl78g1d.scan_window}") &amp;&amp; ("${module.framework.sf_ble_rl78g1d.scan_window}" &gt; 3) &amp;&amp; ("${module.framework.sf_ble_rl78g1d.scan_window}" &lt; 16385)
            </constraint>
		</property>
		<property default="40" display="Maximum Connection Interval" id="module.framework.sf_ble_rl78g1d.con_interval">
			<constraint display="Value must be in range 6 to 3200">
                testInteger("${module.framework.sf_ble_rl78g1d.con_interval}") &amp;&amp; ("${module.framework.sf_ble_rl78g1d.con_interval}" &gt; 5) &amp;&amp; ("${module.framework.sf_ble_rl78g1d.con_interval}" &lt; 3201)
            </constraint>
		</property>
		<property default="0" display="Connection Slave Latency" id="module.framework.sf_ble_rl78g1d.slave_latency">
			<constraint display="Value must be in range 0 to 499">
                testInteger("${module.framework.sf_ble_rl78g1d.slave_latency}") &amp;&amp;("${module.framework.sf_ble_rl78g1d.slave_latency}" &lt; 500)
            </constraint>
		</property>
		<property default="80" display="Supervision Timeout" id="module.framework.sf_ble_rl78g1d.sup_timeout">
			<constraint display="Value must be in range 10 to 3200">
                testInteger("${module.framework.sf_ble_rl78g1d.sup_timeout}") &amp;&amp; ("${module.framework.sf_ble_rl78g1d.sup_timeout}" &gt; 9) &amp;&amp; ("${module.framework.sf_ble_rl78g1d.sup_timeout}" &lt; 3201)
            </constraint>
		</property>
				<property default="1" display="BLE Driver Thread Priority" id="module.framework.sf_ble_rl78g1d.ble_driver_priority">
			<constraint display="Numerical priority of thread. Legal values range from 0 through (TX_MAX_PRIORITY-1), where a value of 0 represents the highest priority">		            			
				testInteger("${module.framework.sf_ble_rl78g1d.ble_driver_priority}")
			</constraint>
		</property>
		<property default="1" display="BLE Serial Thread Priority" id="module.framework.sf_ble_rl78g1d.ble_serial_priority">
			<constraint display="Numerical priority of thread. Legal values range from 0 through (TX_MAX_PRIORITY-1), where a value of 0 represents the highest priority">		            			
				testInteger("${module.framework.sf_ble_rl78g1d.ble_serial_priority}")
			</constraint>
		</property>
		<header>
		/** SF_BLE on RL78G1D BLE Driver instance */
		extern sf_ble_instance_t ${module.framework.sf_ble_rl78g1d.name};
		
		</header>
		<includes>
		#include &quot;sf_ble_api.h&quot;
		#include &quot;sf_ble_rl78g1d.h&quot;
		</includes>
		<declarations>

static const sf_ble_on_rl78g1d_cfg_t ${module.framework.sf_ble_rl78g1d.name}_on_rl78g1d_cfg =
{
 .p_low_lvl_sf_comms			= &amp;${module.framework.sf_ble_rl78g1d.requires.sf_comms::module.framework.sf_comms.name},
 .p_low_lvl_timer 				= &amp;${module.framework.sf_ble_rl78g1d.requires.timer_on_gpt::module.driver.timer.name},
 .ble_driver_thread_priority	= ${module.framework.sf_ble_rl78g1d.ble_driver_priority},
 .ble_serial_thread_priority	= ${module.framework.sf_ble_rl78g1d.ble_serial_priority},
};

static sf_ble_ctrl_t ${module.framework.sf_ble_rl78g1d.name}_ctrl;
static const sf_ble_cfg_t ${module.framework.sf_ble_rl78g1d.name}_cfg =
{
    .bd_addr 		    	= ${module.framework.sf_ble_rl78g1d.bd_addr},
    .own_addr_type      	= ${module.framework.sf_ble_rl78g1d.own_addr_type},
    .max_slaves         	= 0,
    .scan_interval      	= ${module.framework.sf_ble_rl78g1d.scan_interval},
    .scan_window        	= ${module.framework.sf_ble_rl78g1d.scan_window},
    .disc_time          	= 0,
    .con_interval       	= ${module.framework.sf_ble_rl78g1d.con_interval},
    .slave_latency      	= ${module.framework.sf_ble_rl78g1d.slave_latency},
    .sup_timeout        	= ${module.framework.sf_ble_rl78g1d.sup_timeout},
    .p_extend           	= &amp;${module.framework.sf_ble_rl78g1d.name}_on_rl78g1d_cfg,
};

/* Instance structure to use this module. */
sf_ble_instance_t ${module.framework.sf_ble_rl78g1d.name} = 
{
    .p_ctrl        = &amp;${module.framework.sf_ble_rl78g1d.name}_ctrl,
    .p_cfg         = &amp;${module.framework.sf_ble_rl78g1d.name}_cfg,
    .p_api         = &amp;g_sf_ble_on_sf_ble_rl78g1d
};


</declarations>
	<init>
		ssp_err_t ssp_err_${module.framework.sf_ble_rl78g1d.name};
		ssp_err_${module.framework.sf_ble_rl78g1d.name} = ${module.framework.sf_ble_rl78g1d.name}.p_api->open(${module.framework.sf_ble_rl78g1d.name}.p_ctrl, ${module.framework.sf_ble_rl78g1d.name}.p_cfg);
		if (SSP_SUCCESS != ssp_err_${module.framework.sf_ble_rl78g1d.name})
		{
			while (1);
		}
        </init>
	</module>
</synergyModuleDescription>
