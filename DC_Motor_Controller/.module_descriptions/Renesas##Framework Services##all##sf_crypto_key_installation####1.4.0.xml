<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_crypto_key_installation" path="ssp_cfg/framework/sf_crypto_key_installation_cfg.h" version="0">
        <property default="config.framework.sf_crypto_key_installation.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_crypto_key_installation.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
            <option display="Default (BSP)" id="config.framework.sf_crypto_key_installation.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled"       id="config.framework.sf_crypto_key_installation.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled"      id="config.framework.sf_crypto_key_installation.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
            #define SF_CRYPTO_KEY_INSTALLATION_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_crypto_key_installation.param_checking_enable}
        </content>
    </config>
    <module config="config.framework.sf_crypto_key_installation" display="Framework|Crypto|${module.framework.sf_crypto_key_installation.name} Crypto Key Installation Framework on sf_crypto_key_installation" id="module.framework.sf_crypto_key_installation" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.framework.sf_crypto_key_installation.${module.framework.sf_crypto_key_installation.name}}" === "1"
        </constraint>
        <requires interface="_rtos" />
        <requires id="module.framework.sf_crypto_key_installation.requires.sf_crypto" interface="interface.framework.sf_crypto" display="Add Crypto Common Framework" />
        <requires id="module.framework.sf_crypto_key_installation.requires.sce_key_installation" interface="interface.driver.crypto.key_installation" display="Add Crypto Key Installation HAL Driver" />
        <provides interface="interface.framework.sf_crypto_key_installation" />
        <provides interface="interface.framework.sf_crypto_key_installation.${module.framework.sf_crypto_key_installation.name}" />

        <property default="g_sf_crypto_key_installation${_instance}" display="Name" id="module.framework.sf_crypto_key_installation.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_key_installation.name}")</constraint>
        </property>
        <property id="module.framework.sf_crypto_key_installation.key_type" display="Key type" default="module.framework.sf_crypto_key_installation.key_type.encrypted_rsa" description="Select the key type.">
            <option display="Encrypted RSA Key" id="module.framework.sf_crypto_key_installation.key_type.encrypted_rsa" value="SF_CRYPTO_KEY_TYPE_ENCRYPTED_RSA_PRIVATE_KEY"/>
            <option display="Encrypted AES Key" id="module.framework.sf_crypto_key_installation.key_type.encrypted_aes" value="SF_CRYPTO_KEY_TYPE_ENCRYPTED_AES_KEY"/>
            <option display="Encrypted ECC Key" id="module.framework.sf_crypto_key_installation.key_type.encrypted_ecc" value="SF_CRYPTO_KEY_TYPE_ENCRYPTED_ECC_PRIVATE_KEY"/>
        </property>
        <property id="module.framework.sf_crypto_key_installation.key_size" display="Key size" default="module.framework.sf_crypto_key_installation.key_size.rsa_2048b" description="Select the key size.">
            <option display="RSA 1024-bits" id="module.framework.sf_crypto_key_installation.key_size.rsa_1024b" value="SF_CRYPTO_KEY_SIZE_RSA_1024"/>
            <option display="RSA 2048-bits" id="module.framework.sf_crypto_key_installation.key_size.rsa_2048b" value="SF_CRYPTO_KEY_SIZE_RSA_2048"/>
            <option display="AES 128-bits" id="module.framework.sf_crypto_key_installation.key_size.aes_128b" value="SF_CRYPTO_KEY_SIZE_AES_128"/>
            <option display="AES XTS 128-bits" id="module.framework.sf_crypto_key_installation.key_size.aes_128b_xts" value="SF_CRYPTO_KEY_SIZE_AES_XTS_128"/>
            <option display="AES 192-bits" id="module.framework.sf_crypto_key_installation.key_size.aes_192b" value="SF_CRYPTO_KEY_SIZE_AES_192"/>
            <option display="AES 256-bits" id="module.framework.sf_crypto_key_installation.key_size.aes_256b" value="SF_CRYPTO_KEY_SIZE_AES_256"/>
            <option display="AES XTS 256-bits" id="module.framework.sf_crypto_key_installation.key_size.aes_256b_xts" value="SF_CRYPTO_KEY_SIZE_AES_XTS_256"/>
            <option display="ECC 192-bits" id="module.framework.sf_crypto_key_installation.key_size.ecc_192b" value="SF_CRYPTO_KEY_SIZE_ECC_192"/>
            <option display="ECC 256-bits" id="module.framework.sf_crypto_key_installation.key_size.ecc_256b" value="SF_CRYPTO_KEY_SIZE_ECC_256"/>
        </property>
        <property default="sf_crypto_key_installation_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_crypto_key_installation.init_function" description="Specify the name of the generated initialization function.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_key_installation.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_crypto_key_installation.init.enable" display="Auto Initialization" id="module.framework.sf_crypto_key_installation.init" description="Select if sf_crypto_key_installation will be initialized during startup.">
            <option display="Enable"  id="module.framework.sf_crypto_key_installation.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_crypto_key_installation.init.disable" value="0"/>
        </property>

        <header>
            extern sf_crypto_key_installation_instance_t ${module.framework.sf_crypto_key_installation.name};
            void ${module.framework.sf_crypto_key_installation.name}_err_callback(void * p_instance, void * p_data);
            void ${module.framework.sf_crypto_key_installation.init_function}(void);
        </header>
        <includes>
            #include &quot;sf_crypto_key_installation.h&quot;
        </includes>
        <declarations>
            #define SF_CRYPTO_KEY_TYPE_ENCRYPTED_RSA_PRIVATE_KEY 100
            #define SF_CRYPTO_KEY_SIZE_RSA_1024                  110
            #define SF_CRYPTO_KEY_SIZE_RSA_2048                  120
            #define SF_CRYPTO_KEY_TYPE_ENCRYPTED_AES_KEY         200
            #define SF_CRYPTO_KEY_SIZE_AES_128                   210
            #define SF_CRYPTO_KEY_SIZE_AES_XTS_128               220 
            #define SF_CRYPTO_KEY_SIZE_AES_192                   230
            #define SF_CRYPTO_KEY_SIZE_AES_256                   240
            #define SF_CRYPTO_KEY_SIZE_AES_XTS_256               250
            #define SF_CRYPTO_KEY_TYPE_ENCRYPTED_ECC_PRIVATE_KEY 300
            #define SF_CRYPTO_KEY_SIZE_ECC_192                   310
            #define SF_CRYPTO_KEY_SIZE_ECC_256                   320
            #if (${module.framework.sf_crypto_key_installation.key_type} == 100)
            #if !((${module.framework.sf_crypto_key_installation.key_size} == 110) || \
                 (${module.framework.sf_crypto_key_installation.key_size} == 120))
            #error "Incorrect Key Type and Key Size pair."
            #endif
            #endif
            #if (${module.framework.sf_crypto_key_installation.key_type} == 200)
            #if !((${module.framework.sf_crypto_key_installation.key_size} == 210) || \
                 (${module.framework.sf_crypto_key_installation.key_size} == 220) ||  \
                 (${module.framework.sf_crypto_key_installation.key_size} == 230) ||  \
                 (${module.framework.sf_crypto_key_installation.key_size} == 240) ||  \
                 (${module.framework.sf_crypto_key_installation.key_size} == 250))
            #error "Incorrect Key Type and Key Size pair."
            #endif
            #endif
            #if (${module.framework.sf_crypto_key_installation.key_type} == 300)
            #if !((${module.framework.sf_crypto_key_installation.key_size} == 310) || \
                (${module.framework.sf_crypto_key_installation.key_size} == 320))
            #error "Incorrect Key Type and Key Size pair."
            #endif
            #endif
            #undef SF_CRYPTO_KEY_TYPE_ENCRYPTED_RSA_PRIVATE_KEY
            #undef SF_CRYPTO_KEY_SIZE_RSA_1024
            #undef SF_CRYPTO_KEY_SIZE_RSA_2048
            #undef SF_CRYPTO_KEY_TYPE_ENCRYPTED_AES_KEY
            #undef SF_CRYPTO_KEY_SIZE_AES_128
            #undef SF_CRYPTO_KEY_SIZE_AES_XTS_128
            #undef SF_CRYPTO_KEY_SIZE_AES_192
            #undef SF_CRYPTO_KEY_SIZE_AES_256
            #undef SF_CRYPTO_KEY_SIZE_AES_XTS_256
            #undef SF_CRYPTO_KEY_TYPE_ENCRYPTED_ECC_PRIVATE_KEY
            #undef SF_CRYPTO_KEY_SIZE_ECC_192
            #undef SF_CRYPTO_KEY_SIZE_ECC_256
            #if defined(__ICCARM__)
            #define ${module.framework.sf_crypto_key_installation.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.framework.sf_crypto_key_installation.name}_err_callback  = ${module.framework.sf_crypto_key_installation.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.framework.sf_crypto_key_installation.name}_err_callback_WEAK_ATTRIBUTE __attribute__ ((weak, alias("${module.framework.sf_crypto_key_installation.name}_err_callback_internal")))
            #endif
            void ${module.framework.sf_crypto_key_installation.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_crypto_key_installation.name}_err_callback_WEAK_ATTRIBUTE;

            /* Control block for ${module.framework.sf_crypto_key_installation.name}. */
            sf_crypto_key_installation_instance_ctrl_t ${module.framework.sf_crypto_key_installation.name}_ctrl;

            /* Configuration structure for ${module.framework.sf_crypto_key_installation.name}. */
            sf_crypto_key_installation_cfg_t ${module.framework.sf_crypto_key_installation.name}_cfg =
            {
                .key_type                  = ${module.framework.sf_crypto_key_installation.key_type},
                .key_size                  = ${module.framework.sf_crypto_key_installation.key_size},
                .p_lower_lvl_common        = (sf_crypto_instance_t *)&amp;${module.framework.sf_crypto_key_installation.requires.sf_crypto::module.framework.sf_crypto.name},
                .p_lower_lvl_instance      = (key_installation_instance_t *)&amp;${module.framework.sf_crypto_key_installation.requires.sce_key_installation::module.driver.sce_key_installation.name},                
                .p_extend                  = NULL, 

            };
            /* Instance structure for ${module.framework.sf_crypto_key_installation.name}. */
            sf_crypto_key_installation_instance_t ${module.framework.sf_crypto_key_installation.name} = 
            {
                .p_ctrl = &amp;${module.framework.sf_crypto_key_installation.name}_ctrl,
                .p_cfg  = &amp;${module.framework.sf_crypto_key_installation.name}_cfg,
                .p_api  = &amp;g_sf_crypto_key_installation_api
            };

            /*******************************************************************************************************************//**
            * @brief  This is a weak example initialization error function. 
            *         It should be overridden by defining a user  function 
            *         with the prototype below.
            *         - void ${module.framework.sf_crypto_key_installation.name}_err_callback(void * p_instance, void * p_data)
            *
            * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback  
            *             arguments used to identify what error caused the callback.
            **********************************************************************************************************************/
            void ${module.framework.sf_crypto_key_installation.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.framework.sf_crypto_key_installation.name}_err_callback_internal(void * p_instance, void * p_data)
            {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

                /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }
			
            /*******************************************************************************************************************//**
            * @brief     Initialization function that the user can choose to have called automatically during thread entry.
            *            The user can call this function at a later time if desired using the prototype below.
            *            - void ${module.framework.sf_crypto_key_installation.init_function}(void)
            **********************************************************************************************************************/
            void ${module.framework.sf_crypto_key_installation.init_function}(void)
            {
                ssp_err_t ssp_err_${module.framework.sf_crypto_key_installation.name};
                ssp_err_${module.framework.sf_crypto_key_installation.name} = ${module.framework.sf_crypto_key_installation.name}.p_api->open(${module.framework.sf_crypto_key_installation.name}.p_ctrl, ${module.framework.sf_crypto_key_installation.name}.p_cfg);
                if (SSP_SUCCESS != ssp_err_${module.framework.sf_crypto_key_installation.name})
                {
                    ${module.framework.sf_crypto_key_installation.name}_err_callback((void *)&amp;${module.framework.sf_crypto_key_installation.name},&amp;ssp_err_${module.framework.sf_crypto_key_installation.name});
                }
            }
        </declarations>
        <init>
            /** Call initialization function for ${module.framework.sf_crypto_key_installation.name}. */
            #if (${module.framework.sf_crypto_key_installation.init})
            /** Call initialization function if user has selected to do so. */
            ${module.framework.sf_crypto_key_installation.init_function}();
            #endif
        </init>
    </module>
</synergyModuleDescription>
