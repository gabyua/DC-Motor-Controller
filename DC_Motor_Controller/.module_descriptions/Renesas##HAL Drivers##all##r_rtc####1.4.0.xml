<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.driver.rtc" path="ssp_cfg/driver/r_rtc_cfg.h" version="0">
		<property default="config.driver.rtc.param_checking_enable.bsp" display="Parameter Checking Enable" id="config.driver.rtc.param_checking_enable" description="If selected code for parameter checking is included in the build.">
			<option display="Default (BSP)" id="config.driver.rtc.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.driver.rtc.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.driver.rtc.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>#define RTC_CFG_PARAM_CHECKING_ENABLE ${config.driver.rtc.param_checking_enable}
</content>
	</config>
	<module config="config.driver.rtc" display="Driver|Timers|${module.driver.rtc.name} RTC Driver on r_rtc" id="module.driver.rtc_on_rtc" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/r_rtc_Module_Guide_Resources">
        <constraint display="Requires any RTC Interrupt enabled or NULL callback (RTC interrupt can be Alarm, Period, and/or Carry)">
          ("${module.driver.rtc.p_callback}" === "NULL") || ("${module.driver.rtc.alarm_ipl}" != "board.icu.common.irq.disabled") || ("${module.driver.rtc.periodic_ipl}" != "board.icu.common.irq.disabled") || ("${module.driver.rtc.carry_ipl}" != "board.icu.common.irq.disabled")
        </constraint>
        <constraint display="Unique name required for each instance">
            "${interface.driver.rtc.${module.driver.rtc.name}}" === "1"
        </constraint>
        <constraint display="Requires RTC Peripheral">
          "${interface.mcu.rtc}" === "1"
        </constraint>
        <requires interface="interface.mcu.rtc" visible="false" display="Requires RTC Peripheral" />
        <provides interface="interface.driver.rtc" />
        <provides interface="interface.driver.rtc_on_rtc" />
        <provides interface="interface.driver.rtc.${module.driver.rtc.name}" />        
        <property default="g_rtc${_instance}" display="Name" id="module.driver.rtc.name" description="Module name.">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.driver.rtc.name}")</constraint>
        </property>
		<property default="module.driver.rtc.clock_source.clock_source_loco" display="Clock Source" id="module.driver.rtc.clock_source" description="Select the RTC clock source.">
			<option display="Sub-Clock" id="module.driver.rtc.clock_source.clock_source_subclk" value="RTC_CLOCK_SOURCE_SUBCLK"/>
			<option display="LOCO" id="module.driver.rtc.clock_source.clock_source_loco" value="RTC_CLOCK_SOURCE_LOCO"/>
		</property>
		<property default="module.driver.rtc.auto_configure.enabled" display="Configure RTC hardware in open() call" id="module.driver.rtc.auto_configure" description="If enabled, the RTC registers and clock source will be initialized in the open() call. If disabled, the user must call the configure() api to initialize the hardware">
			<option display="Yes" id="module.driver.rtc.auto_configure.enabled" value="true" />
			<option display="No" id="module.driver.rtc.auto_configure.disabled" value="false" />
		</property>
        <property default="0" display="Error Adjustment Value [DEPRECATED]" id="module.driver.rtc.error_adjustment_value" description="Deprecated. Set to 0.">
            <constraint display="Value locked as it is deprecated" > ("${module.driver.rtc.error_adjustment_value}" === 0)</constraint>
        </property>
        <property default="module.driver.rtc.error_adjustment_type.error_adjustment_none" display="Error Adjustment Type [DEPRECATED]" id="module.driver.rtc.error_adjustment_type" description="Deprecated. Select None.">
            <option display="None" id="module.driver.rtc.error_adjustment_type.error_adjustment_none" value="RTC_ERROR_ADJUSTMENT_NONE"/>
        </property>
        <property default="NULL" display="Callback" id="module.driver.rtc.p_callback" description="A user callback function can be provided. If this callback function is provided, it will be called from the interrupt service routine (ISR).">
			<constraint display="Name must be a valid C symbol">testSymbol("${module.driver.rtc.p_callback}")</constraint>
        </property>
        <property default="" display="Alarm Interrupt Priority" id="module.driver.rtc.alarm_ipl" description="Select the alarm interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
        </property>
        <property default="" display="Period Interrupt Priority" id="module.driver.rtc.periodic_ipl" description="Select the period interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
        </property>
        <property default="" display="Carry Interrupt Priority" id="module.driver.rtc.carry_ipl" description="Select the carry interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <header>
            /** RTC on RTC Instance. */
            extern const rtc_instance_t ${module.driver.rtc.name};
			#ifndef ${module.driver.rtc.p_callback}
            void ${module.driver.rtc.p_callback}(rtc_callback_args_t * p_args);
            #endif
        </header>
		<includes>#include &quot;r_rtc.h&quot;
#include &quot;r_rtc_api.h&quot;</includes>
		<declarations>
#if ${module.driver.rtc.alarm_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.rtc.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_RTC)
SSP_VECTOR_DEFINE(rtc_alarm_isr, RTC, ALARM);
#endif
#endif
#if ${module.driver.rtc.periodic_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.rtc.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_RTC)
SSP_VECTOR_DEFINE(rtc_period_isr, RTC, PERIOD);
#endif
#endif
#if ${module.driver.rtc.carry_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.rtc.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_RTC)
SSP_VECTOR_DEFINE(rtc_carry_isr, RTC, CARRY);
#endif
#endif
rtc_instance_ctrl_t ${module.driver.rtc.name}_ctrl;
const rtc_cfg_t ${module.driver.rtc.name}_cfg =
{
    .clock_source           = ${module.driver.rtc.clock_source},
    .hw_cfg                 = ${module.driver.rtc.auto_configure},
    .error_adjustment_value = ${module.driver.rtc.error_adjustment_value},
    .error_adjustment_type  = ${module.driver.rtc.error_adjustment_type},
    .p_callback             = ${module.driver.rtc.p_callback},
    .p_context              = &amp;${module.driver.rtc.name},
    .alarm_ipl              = ${module.driver.rtc.alarm_ipl},
    .periodic_ipl           = ${module.driver.rtc.periodic_ipl},
    .carry_ipl              = ${module.driver.rtc.carry_ipl},
};
/* Instance structure to use this module. */
const rtc_instance_t ${module.driver.rtc.name} = 
{
    .p_ctrl        = &amp;${module.driver.rtc.name}_ctrl,
    .p_cfg         = &amp;${module.driver.rtc.name}_cfg,
    .p_api         = &amp;g_rtc_on_rtc
};

</declarations>
	</module>
</synergyModuleDescription>
