<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.driver.sci_uart" path="ssp_cfg/driver/r_sci_uart_cfg.h" version="0">
        <property default="config.driver.sci_uart.external_rts_operation.disabled" display="External RTS Operation" id="config.driver.sci_uart.external_rts_operation" description="Enable an IOPORT pin to be used as RTS signal. For RTS functionality, set this configuration parameter to  Enable and specify the configuration Name of UART callback function for the RTS external pin control.">
            <option display="Enable" id="config.driver.sci_uart.external_rts_operation.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.external_rts_operation.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.uart_rx_enable.enabled" display="Reception" id="config.driver.sci_uart.uart_rx_enable" description="Enable or disable UART reception for all UART channels on SCI. Setting this configuration parameter to Disable reduces code size because the portion of code for UART reception is not compiled.">
            <option display="Enable" id="config.driver.sci_uart.uart_rx_enable.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.uart_rx_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.uart_tx_enable.enabled" display="Transmission" id="config.driver.sci_uart.uart_tx_enable" description="Enable or disable UART transmission for all UART channels on SCI. Setting this configuration to Disable reduces  code size because the portion of code for UART transmission is not compiled.">
            <option display="Enable" id="config.driver.sci_uart.uart_tx_enable.enabled" value="(1)"/>
            <option display="Disable" id="config.driver.sci_uart.uart_tx_enable.disabled" value="(0)"/>
        </property>
        <property default="config.driver.sci_uart.param_checking_enable.bsp" display="Parameter Checking" id="config.driver.sci_uart.param_checking_enable" description="If selected code for parameter checking is included in the build.">
            <option display="Default (BSP)" id="config.driver.sci_uart.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.driver.sci_uart.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.driver.sci_uart.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>#define SCI_UART_CFG_EXTERNAL_RTS_OPERATION ${config.driver.sci_uart.external_rts_operation}
            #define SCI_UART_CFG_RX_ENABLE ${config.driver.sci_uart.uart_rx_enable}
            #define SCI_UART_CFG_TX_ENABLE ${config.driver.sci_uart.uart_tx_enable}
            #define SCI_UART_CFG_PARAM_CHECKING_ENABLE ${config.driver.sci_uart.param_checking_enable}
        </content>
    </config>
    <module config="config.driver.sci_uart" display="Driver|Connectivity|${module.driver.uart.name} UART Driver on r_sci_uart" id="module.driver.uart_on_sci_uart" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/r_sci_uart_Module_Guide_Resources">
        <constraint display="Receive Transfer cannot be used (must be NULL) if RTS callback is used">
            ("NULL" === "${module.driver.uart.callback.rts_pin_ctrl}") || (!testExists("${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name}"))
        </constraint>
		<constraint display="Unique name required for each instance">
            "${interface.driver.uart.${module.driver.uart.name}}" === "1"
	    </constraint>
        <constraint display="Requires SCI Peripheral">
          "${interface.mcu.sci.external}" === "1"
        </constraint>
        <requires interface="interface.mcu.sci.external" visible="false" display="Requires SCI Peripheral" />
		<requires id="module.driver.uart_on_sci_uart.requires.transfer_tx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Transmission [Recommended but optional]">
			<override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
			<override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
			<override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_fixed"/>
			<override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_source"/>
			<override property="module.driver.transfer.p_dest" value="NULL"/>
			<override property="module.driver.transfer.p_src" value="NULL"/>
			<override property="module.driver.transfer.length" value="0"/>
			<override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
			<override property="module.driver.transfer.num_blocks" value="0"/>
			<override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
			<override property="module.driver.transfer.p_callback" value="NULL"/>
			<override property="module.driver.transfer.activation_source" value="module.driver.transfer.event.event_sci${module.driver.uart.channel}_txi"/>
		</requires>
        <requires id="module.driver.uart_on_sci_uart.requires.transfer_rx" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver for Reception [Not recommended]" find="false">
			<override property="module.driver.transfer.size" value="module.driver.transfer.size.size_1_byte"/>
			<override property="module.driver.transfer.mode" value="module.driver.transfer.mode.mode_normal"/>
			<override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_fixed"/>
			<override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_destination"/>
			<override property="module.driver.transfer.p_dest" value="NULL"/>
			<override property="module.driver.transfer.p_src" value="NULL"/>
			<override property="module.driver.transfer.length" value="0"/>
			<override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
			<override property="module.driver.transfer.num_blocks" value="0"/>
			<override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
			<override property="module.driver.transfer.p_callback" value="NULL"/>
			<override property="module.driver.transfer.activation_source" value="module.driver.transfer.event.event_sci${module.driver.uart.channel}_rxi"/>
		</requires>		
        <provides interface="interface.driver.uart" />        
        <provides interface="interface.driver.uart_on_sci_uart" />
        <provides interface="interface.driver.uart.${module.driver.uart.name}" />
        <property default="g_uart${_instance}" display="Name" id="module.driver.uart.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.name}")</constraint>
        </property>
        
        <!-- UART interface configuration -->
        <property default="0" display="Channel" id="module.driver.uart.channel" description="Select the SCI channel.">
            <constraint display="Value must be an integer between 0 and 9">testInteger("${module.driver.uart.channel}")  &amp;&amp; ("${module.driver.uart.channel}" &gt;= 0) &amp;&amp; ("${module.driver.uart.channel}" &lt; 10)</constraint>
        </property>
        <property default="9600" display="Baud Rate" id="module.driver.uart.baud_rate" description="Specify the baud rate.">
            <constraint display="Value must be an integer">testInteger("${module.driver.uart.baud_rate}")</constraint>
        </property>
        <property default="module.driver.uart.data_bits.data_bits_8" display="Data Bits" id="module.driver.uart.data_bits" description="Select the number of bits per word.">
            <option display="8bits" id="module.driver.uart.data_bits.data_bits_8" value="UART_DATA_BITS_8"/>
            <option display="7bits" id="module.driver.uart.data_bits.data_bits_7" value="UART_DATA_BITS_7"/>
            <option display="9bits" id="module.driver.uart.data_bits.data_bits_9" value="UART_DATA_BITS_9"/>
        </property>
        <property default="module.driver.uart.parity.parity_off" display="Parity" id="module.driver.uart.parity" description="Select the parity mode.">
            <option display="None" id="module.driver.uart.parity.parity_off" value="UART_PARITY_OFF"/>
            <option display="Odd" id="module.driver.uart.parity.parity_odd" value="UART_PARITY_ODD"/>
            <option display="Even" id="module.driver.uart.parity.parity_even" value="UART_PARITY_EVEN"/>
        </property>
        <property default="module.driver.uart.stop_bits.stop_bits_1" display="Stop Bits" id="module.driver.uart.stop_bits" description="Select the number of stop bits.">
            <option display="1bit" id="module.driver.uart.stop_bits.stop_bits_1" value="UART_STOP_BITS_1"/>
            <option display="2bits" id="module.driver.uart.stop_bits.stop_bits_2" value="UART_STOP_BITS_2"/>
        </property>
        <property default="module.driver.uart.ctsrts_en.false" display="CTS/RTS Selection" id="module.driver.uart.ctsrts_en" description="Select CTS or RTS for the CTSn/RTSn pin of SCI channel n. The SCI hardware supports either the CTS or the RTS control signal on this pin but not both.">
            <option display="CTS (Note that RTS is available when enabling External RTS Operation mode which uses 1 GPIO pin)" id="module.driver.uart.ctsrts_en.true" value="true"/>
            <option display="RTS (CTS is disabled)" id="module.driver.uart.ctsrts_en.false" value="false"/>
        </property>

        <!-- External defined callback function -->
        <property default="user_uart_callback" display="Name of UART callback function to be defined by user" id="module.driver.uart.callback" description="A user callback function can be provided. If this callback function is provided, it will be called from the interrupt service routine (ISR).">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.callback}")</constraint>
        </property>
        <property default="NULL" display="Name of UART callback function for the RTS external pin control to be defined by user" id="module.driver.uart.callback.rts_pin_ctrl" description="A user callback function can be provided. If this callback function is provided, it is called to control the RTS pin when flow control is used.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.driver.uart.callback.rts_pin_ctrl}")</constraint>
        </property>

        <!-- UART Extended configuration -->
        <property default="module.driver.uart.clk_src.int_clk" display="Clock Source" id="module.driver.uart.clk_src" description="Selection of the clock source to be used in the baud-rate clock generator.">
            <option display="Internal Clock" id="module.driver.uart.clk_src.int_clk" value="SCI_CLK_SRC_INT"/>
            <option display="External Clock 8x baudrate" id="module.driver.uart.clk_src.ext_clk_8x" value="SCI_CLK_SRC_EXT8X"/>
            <option display="External Clock 16x baudrate" id="module.driver.uart.clk_src.ext_clk_16x" value="SCI_CLK_SRC_EXT16X"/>
        </property>
        <property default="module.driver.uart.baudclk_out.false" display="Baudrate Clock Output from SCK pin" id="module.driver.uart.baudclk_out" description="Optional setting to output the baudrate clock on the SCKn pin for the selected channel n.">
            <option display="Enable" id="module.driver.uart.baudclk_out.true" value="true"/>
            <option display="Disable" id="module.driver.uart.baudclk_out.false" value="false"/>
        </property>
        <property default="module.driver.uart.rx_edge_start.true" display="Start bit detection" id="module.driver.uart.rx_edge_start" description="Start bit detection mode in the reception, usually set Falling Edge to this configuration.">
            <option display="Falling Edge" id="module.driver.uart.rx_edge_start.true" value="true"/>
            <option display="Low Level" id="module.driver.uart.rx_edge_start.false" value="false"/>
        </property>
        <property default="module.driver.uart.noisecancel_en.false" display="Noise Cancel" id="module.driver.uart.noisecancel_en" description="Enable the digital noise cancellation on RXDn pin. The digital noise filter block in SCI consists of two-stage flipflop circuits.">
            <option display="Enable" id="module.driver.uart.noisecancel_en.true" value="true"/>
            <option display="Disable" id="module.driver.uart.noisecancel_en.false" value="false"/>
        </property>
        <property default="module.driver.uart.bitrate_modulation.true" display="Bit Rate Modulation Enable" id="module.driver.uart.bitrate_modulation" description="Enable bit rate modulation.">
            <option display="Enable" id="module.driver.uart.bitrate_modulation.true" value="true"/>
            <option display="Disable" id="module.driver.uart.bitrate_modulation.false" value="false"/>
        </property>
        <property default="module.driver.uart.rx_fifo_trigger.max" display="Receive FIFO Trigger Level" id="module.driver.uart.rx_fifo_trigger" description="Unused if the channel has no FIFO or if DTC is used for reception.  Set to One to get a callback immediately when each byte is received.  Set to Max to get a callback when FIFO is full or after 15 bit times with no data (fewer interrupts).">
            <option display="One" id="module.driver.uart.rx_fifo_trigger.one" value="SCI_UART_RX_FIFO_TRIGGER_1"/>
            <option display="Max" id="module.driver.uart.rx_fifo_trigger.max" value="SCI_UART_RX_FIFO_TRIGGER_MAX"/>
        </property>
        <property default="" display="Receive Interrupt Priority" id="module.driver.uart.rxi_ipl" description="Select the receive interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <property default="" display="Transmit Interrupt Priority" id="module.driver.uart.txi_ipl" description="Select the transmit interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <property default="" display="Transmit End Interrupt Priority" id="module.driver.uart.tei_ipl" description="Select the transmit end interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.mandatory"/>
        </property>
        <property default="" display="Error Interrupt Priority" id="module.driver.uart.eri_ipl" description="Select the error interrupt priority.">
            <select enum="enum.mcu.nvic.priorities.optional"/>
        </property>
        <header>
            /** UART on SCI Instance. */
            extern const uart_instance_t      ${module.driver.uart.name};
            #ifdef ${module.driver.uart.callback.rts_pin_ctrl}
            #else
            extern void             ${module.driver.uart.callback.rts_pin_ctrl} (uint32_t channel, uint32_t level);
            #endif
#ifndef ${module.driver.uart.callback}
void ${module.driver.uart.callback}(uart_callback_args_t * p_args);
#endif
        </header>
        <includes>
            #include &quot;r_sci_uart.h&quot;
            #include &quot;r_uart_api.h&quot;
        </includes>
        <declarations>
#if ${module.driver.uart.rxi_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.uart.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_SCI${module.driver.uart.channel})
SSP_VECTOR_DEFINE_CHAN(sci_uart_rxi_isr, SCI, RXI, ${module.driver.uart.channel});
#endif
#endif
#if ${module.driver.uart.txi_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.uart.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_SCI${module.driver.uart.channel})
SSP_VECTOR_DEFINE_CHAN(sci_uart_txi_isr, SCI, TXI, ${module.driver.uart.channel});
#endif
#endif
#if ${module.driver.uart.tei_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.uart.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_SCI${module.driver.uart.channel})
SSP_VECTOR_DEFINE_CHAN(sci_uart_tei_isr, SCI, TEI, ${module.driver.uart.channel});
#endif
#endif
#if ${module.driver.uart.eri_ipl} != BSP_IRQ_DISABLED
#if !defined(SSP_SUPPRESS_ISR_${module.driver.uart.name}) &amp;&amp; !defined(SSP_SUPPRESS_ISR_SCI${module.driver.uart.channel})
SSP_VECTOR_DEFINE_CHAN(sci_uart_eri_isr, SCI, ERI, ${module.driver.uart.channel});
#endif
#endif
            sci_uart_instance_ctrl_t     ${module.driver.uart.name}_ctrl;

            /** UART extended configuration for UARTonSCI HAL driver */
            const uart_on_sci_cfg_t ${module.driver.uart.name}_cfg_extend =
            {
                .clk_src             = ${module.driver.uart.clk_src},
                .baudclk_out         = ${module.driver.uart.baudclk_out},
                .rx_edge_start       = ${module.driver.uart.rx_edge_start},
                .noisecancel_en      = ${module.driver.uart.noisecancel_en},
                .p_extpin_ctrl       = ${module.driver.uart.callback.rts_pin_ctrl},
                .bitrate_modulation  = ${module.driver.uart.bitrate_modulation},
                .rx_fifo_trigger     = ${module.driver.uart.rx_fifo_trigger}
            };

            /** UART interface configuration */
            const uart_cfg_t ${module.driver.uart.name}_cfg =
            {
                .channel             = ${module.driver.uart.channel},
                .baud_rate           = ${module.driver.uart.baud_rate},
                .data_bits           = ${module.driver.uart.data_bits},
                .parity              = ${module.driver.uart.parity},
                .stop_bits           = ${module.driver.uart.stop_bits},
                .ctsrts_en           = ${module.driver.uart.ctsrts_en},
                .p_callback          = ${module.driver.uart.callback},
                .p_context           = &amp;${module.driver.uart.name},
                .p_extend            = &amp;${module.driver.uart.name}_cfg_extend,
#define SYNERGY_NOT_DEFINED (1)                        
#if (SYNERGY_NOT_DEFINED == ${module.driver.uart_on_sci_uart.requires.transfer_tx::module.driver.transfer.name})
                .p_transfer_tx       = NULL,
#else
                .p_transfer_tx       = &amp;${module.driver.uart_on_sci_uart.requires.transfer_tx::module.driver.transfer.name},
#endif            
#if (SYNERGY_NOT_DEFINED == ${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name})
                .p_transfer_rx       = NULL,
#else
                .p_transfer_rx       = &amp;${module.driver.uart_on_sci_uart.requires.transfer_rx::module.driver.transfer.name},
#endif   
#undef SYNERGY_NOT_DEFINED            
                .rxi_ipl             = ${module.driver.uart.rxi_ipl},
                .txi_ipl             = ${module.driver.uart.txi_ipl},
                .tei_ipl             = ${module.driver.uart.tei_ipl},
                .eri_ipl             = ${module.driver.uart.eri_ipl},
            };

/* Instance structure to use this module. */
const uart_instance_t ${module.driver.uart.name} = 
{
    .p_ctrl        = &amp;${module.driver.uart.name}_ctrl,
    .p_cfg         = &amp;${module.driver.uart.name}_cfg,
    .p_api         = &amp;g_uart_on_sci
};            

        </declarations>
    </module>
</synergyModuleDescription>
