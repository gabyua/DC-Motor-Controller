<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_crypto_hash" path="ssp_cfg/framework/sf_crypto_hash_cfg.h" version="0">
        <property default="config.framework.sf_crypto_hash.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_crypto_hash.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
            <option display="Default (BSP)" id="config.framework.sf_crypto_hash.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled"       id="config.framework.sf_crypto_hash.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled"      id="config.framework.sf_crypto_hash.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
            #define SF_CRYPTO_HASH_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_crypto_hash.param_checking_enable}

            /* The use of BSP_CFG_MCU_PART_SERIES below is not expected in a SSP framework module because
             * framework modules should not have any MCU part dependencies. However, the MCU part dependent
             * macro is temporarily used here as an exception in this version of SSP. The implementation is
             * a subject to change and will be updated in the future version of SSP.
             */
            #if (BSP_CFG_MCU_PART_SERIES == 1) || (BSP_CFG_MCU_PART_SERIES == 3)
            #define SF_CRYPTO_HASH_CFG_HAL_NOT_AVAILABLE
            #endif
        </content>
    </config>
    <module config="config.framework.sf_crypto_hash" display="Framework|Crypto|${module.framework.sf_crypto_hash.name} Crypto HASH Framework on sf_crypto_hash" id="module.framework.sf_crypto_hash" version="1" url="http://knowledgebase.renesas.com/English_Content/Renesas_Synergy%E2%84%A2_Platform/Renesas_Synergy_Knowledge_Base/sf_crypto_Module_Guide_Resources/sf_crypto_hash_Module_Guide_Resources">
        <constraint display="Module instances must have unique names">
            "${interface.framework.sf_crypto_hash.${module.framework.sf_crypto_hash.name}}" === "1"
        </constraint>
        <requires interface="_rtos" />
        <requires id="module.framework.sf_crypto_hash.requires.sf_crypto" interface="interface.framework.sf_crypto" display="Add Crypto Common Framework" />
        <requires id="module.framework.sf_crypto_hash.requires.hal_hash" interface="interface.driver.sce_hash" display="Add Crypto HASH Driver" />
        <provides interface="interface.framework.sf_crypto_hash" />
        <provides interface="interface.framework.sf_crypto_hash.${module.framework.sf_crypto_hash.name}" />

        <property default="g_sf_crypto_hash${_instance}" display="Instance Name" id="module.framework.sf_crypto_hash.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_hash.name}")</constraint>
        </property>
        <property default="sf_crypto_hash_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_crypto_hash.init_function" description="Specify the name of the generated initialization function.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_crypto_hash.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_crypto_hash.init.enable" display="Auto Initialization" id="module.framework.sf_crypto_hash.init" description="Select if sf_crypto_hash will be initialized during startup.">
            <option display="Enable"  id="module.framework.sf_crypto_hash.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_crypto_hash.init.disable" value="0"/>
        </property>

        <header>
            extern sf_crypto_hash_instance_t ${module.framework.sf_crypto_hash.name};

            /* Crypto HASH Framework Initialization Function for the instance '${module.framework.sf_crypto_hash.name}'. */
            void ${module.framework.sf_crypto_hash.init_function}(void);
            /* Crypto HASH Framework Error Callback Function for the instance '${module.framework.sf_crypto_hash.name}'. */
            void ${module.framework.sf_crypto_hash.name}_err_callback(void * p_instance, void * p_data);
        </header>
        <includes>
            #include &quot;sf_crypto_hash.h&quot;
        </includes>
        <declarations>
            
            /* Control block for ${module.framework.sf_crypto_hash.name}. */
            sf_crypto_hash_instance_ctrl_t ${module.framework.sf_crypto_hash.name}_ctrl;

            /* Configuration structure for ${module.framework.sf_crypto_hash.name}. */
            sf_crypto_hash_cfg_t ${module.framework.sf_crypto_hash.name}_cfg =
            {
                .hash_type                 = SF_CRYPTO_HASH_ALGORITHM_SHA${module.framework.sf_crypto_hash.requires.hal_hash::module.driver.sce_hash.algorithm},
                .p_lower_lvl_crypto_common = (sf_crypto_instance_t *)&amp;${module.framework.sf_crypto_hash.requires.sf_crypto::module.framework.sf_crypto.name}, 
                .p_lower_lvl_instance      = (hash_instance_t *)&amp;${module.framework.sf_crypto_hash.requires.hal_hash::module.driver.sce_hash.name}, 
                .p_extend                  = NULL, 

            };
            /* Instance structure for ${module.framework.sf_crypto_hash.name}. */
            sf_crypto_hash_instance_t ${module.framework.sf_crypto_hash.name} = 
            {
                .p_ctrl = &amp;${module.framework.sf_crypto_hash.name}_ctrl,
                .p_cfg  = &amp;${module.framework.sf_crypto_hash.name}_cfg,
                .p_api  = &amp;g_sf_crypto_hash_api
            };

            #if defined(__ICCARM__)
            #define ${module.framework.sf_crypto_hash.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.framework.sf_crypto_hash.name}_err_callback  = ${module.framework.sf_crypto_hash.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.framework.sf_crypto_hash.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.framework.sf_crypto_hash.name}_err_callback_internal")))
            #endif
            void ${module.framework.sf_crypto_hash.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_crypto_hash.name}_err_callback_WEAK_ATTRIBUTE;

            /*******************************************************************************************************************//**
             * @brief      This is a weak example initialization error function.  It should be overridden by defining a user function 
             *             with the prototype below.
             *             - void ${module.framework.sf_crypto_hash.name}_err_callback(void * p_instance, void * p_data)
             *
             * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used
             *             to identify what error caused the callback.
             **********************************************************************************************************************/
            void ${module.framework.sf_crypto_hash.name}_err_callback_internal (void * p_instance, void * p_data);
            void ${module.framework.sf_crypto_hash.name}_err_callback_internal (void * p_instance, void * p_data)
            {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

               /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }

            /*******************************************************************************************************************//**
             * @brief     Initialization function that the user can choose to have called automatically during thread entry.
             *            The user can call this function at a later time if desired using the prototype below.
             *            - void ${module.framework.sf_crypto_hash.init_function}(void)
             **********************************************************************************************************************/
            void ${module.framework.sf_crypto_hash.init_function} (void)
            {
                /* Open Crypto Common Framework. */
                ssp_err_t ssp_err_${module.framework.sf_crypto_hash.name};
                ssp_err_${module.framework.sf_crypto_hash.name} = ${module.framework.sf_crypto_hash.name}.p_api->open(${module.framework.sf_crypto_hash.name}.p_ctrl, ${module.framework.sf_crypto_hash.name}.p_cfg);
                if (SSP_SUCCESS != ssp_err_${module.framework.sf_crypto_hash.name})
                {
                    BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
                }
                if (SSP_SUCCESS != ssp_err_${module.framework.sf_crypto_hash.name})
                {
                    ${module.framework.sf_crypto_hash.name}_err_callback((void *)&amp;${module.framework.sf_crypto_hash.name},&amp;ssp_err_${module.framework.sf_crypto_hash.name});
                }
            }
        </declarations>
        <init>
            /** Call initialization function for ${module.framework.sf_crypto_hash.name}. */
            #if (${module.framework.sf_crypto_hash.init})
            ${module.framework.sf_crypto_hash.init_function}();
            #endif
        </init>
    </module>
</synergyModuleDescription>
