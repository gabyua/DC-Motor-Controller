<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
  <config id="config.el.nx_snmp_agent" path="ssp_cfg/framework/el/nx_snmp_agent_cfg.h" version="0">
    <property default="4096" display="Internal thread stack size (bytes)" id="config.el.nx_snmp_agent.stack_size">
      <constraint display="Value must be a non-negative integer">
        testInteger("${config.el.nx_snmp_agent.stack_size}")  &amp;&amp; (("${config.el.nx_snmp_agent.stack_size}" % 8) == 0)
      </constraint>
    </property>
    <property default="16" display="SNMP agent priority" id="config.el.nx_snmp_agent.nx_snmp_agent_priority">
      <constraint display="Value must be a non-negative integer">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_agent_priority}")  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_agent_priority}" &gt;= 0)
      </constraint>
    </property>
    <property default="config.el.nx_snmp_agent.nx_snmp_type_of_service.normal" display="Type of service for SNMP responses" id="config.el.nx_snmp_agent.nx_snmp_type_of_service">
      <option display="Normal" id="config.el.nx_snmp_agent.nx_snmp_type_of_service.normal" value="NX_IP_NORMAL"/>
      <option display="Minimum Delay" id="config.el.nx_snmp_agent.nx_snmp_type_of_service.min_delay" value="NX_IP_MIN_DELAY"/>
      <option display="Maximum Data" id="config.el.nx_snmp_agent.nx_snmp_type_of_service.max_data" value="NX_IP_MAX_DATA"/>
      <option display="Maximum Reliability" id="config.el.nx_snmp_agent.nx_snmp_type_of_service.max_reliability" value="NX_IP_MAX_RELIABLE"/>
      <option display="Minimum Cost" id="config.el.nx_snmp_agent.nx_snmp_type_of_service.min_cost" value="NX_IP_MIN_COST"/>
    </property>
    <property default="config.el.nx_snmp_agent.nx_snmp_fragment_option.dont" display="Fragment enable for SNMP PDU requests" id="config.el.nx_snmp_agent.nx_snmp_fragment_option">
      <option display="Fragment" id="config.el.nx_snmp_agent.nx_snmp_fragment_option.okay" value="NX_FRAGMENT_OKAY"/>
      <option display="Dont Fragment" id="config.el.nx_snmp_agent.nx_snmp_fragment_option.dont" value="NX_DONT_FRAGMENT"/>
    </property>
    <property default="128" display="SNMP socket time to live" id="config.el.nx_snmp_agent.nx_snmp_time_to_live">
      <constraint display="Value must be between 1 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_time_to_live}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_time_to_live}" &gt;= 1)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_time_to_live}" &lt;= 255)
      </constraint>
    </property>
    <property default="100" display="Agent timeout" id="config.el.nx_snmp_agent.nx_snmp_agent_timeout">
      <constraint display="Value must be between 100 to 1500">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_agent_timeout}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_agent_timeout}" &gt;= 100)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_agent_timeout}" &lt;= 1500)
      </constraint>
    </property>
    <property default="255" display="Max octet string size" id="config.el.nx_snmp_agent.nx_snmp_max_octet_string">
      <constraint display="Value must be between 64 to 1500">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_octet_string}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_octet_string}" &gt;= 64)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_octet_string}" &lt;= 1500)
      </constraint>
    </property>
    <property default="32" display="Max context string size" id="config.el.nx_snmp_agent.nx_snmp_max_context_string">
      <constraint display="Value must be between 32 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_context_string}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_context_string}" &gt;= 32)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_context_string}" &lt;= 255)
      </constraint>
    </property>
    <property default="64" display="Max User name Size" id="config.el.nx_snmp_agent.nx_snmp_max_user_name">
      <constraint display="Value must be between 20 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_user_name}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_user_name}" &gt;= 20)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_user_name}" &lt;= 255)
      </constraint>
    </property>
    <property default="64" display="Max security Key Size" id="config.el.nx_snmp_agent.nx_snmp_max_security_key">
      <constraint display="Value must be between 20 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_security_key}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_security_key}" &gt;= 20)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_security_key}" &lt;= 255)
      </constraint>
    </property>
    <property default="560" display="Minimum SNMP packet size" id="config.el.nx_snmp_agent.nx_snmp_min_packet_size">
      <constraint display="Value must be between 560 to 1500">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_min_packet_size}")  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_min_packet_size}" &gt;= 560)&amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_min_packet_size}" &gt;= 1500)
      </constraint>
    </property>
    <property default="161" display="UDP port number" id="config.el.nx_snmp_agent.nx_snmp_agent_port">
      <constraint display="Value must be between 1 to 65535">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_agent_port}")  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_agent_port}" &gt;= 1)&amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_agent_port}" &gt;= 65535)
      </constraint>
    </property>
    <property default="162" display="Trap destination port" id="config.el.nx_snmp_agent.nx_snmp_manager_trap_port">
      <constraint display="Value must be between 1 to 65535">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_manager_trap_port}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_manager_trap_port}" &gt;= 1)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_manager_trap_port}" &lt;= 65535)
      </constraint>
    </property>
    <property default="64" display="Max trap Name Size" id="config.el.nx_snmp_agent.nx_snmp_max_trap_name">
      <constraint display="Value must be between 20 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_trap_name}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_trap_name}" &gt;= 20)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_trap_name}" &lt;= 255)
      </constraint>
    </property>
    <property default="64" display="Max trap Key Size" id="config.el.nx_snmp_agent.nx_snmp_max_trap_key">
      <constraint display="Value must be between 20 to 255">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_max_trap_key}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_trap_key}" &gt;= 20)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_max_trap_key}" &lt;= 255)
      </constraint>
    </property>
    <property default="100" display="Interval between SNMP packet processing timer ticks" id="config.el.nx_snmp_agent.nx_snmp_time_interval">
      <constraint display="Value must be between 1 to 65535">
        testInteger("${config.el.nx_snmp_agent.nx_snmp_time_interval}") &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_time_interval}" &gt;= 1)  &amp;&amp; ("${config.el.nx_snmp_agent.nx_snmp_time_interval}" &lt;= 65535)
      </constraint>
    </property>
    <property default="config.el.nx_snmp_agent.enable_v1.enable" display="SNMP Version 1" id="config.el.nx_snmp_agent.enable_v1">
      <option display="Enable" id="config.el.nx_snmp_agent.enable_v1.enable" value="1"/>
      <option display="Disable" id="config.el.nx_snmp_agent.enable_v1.disable" value="0"/>
    </property>
    <property default="config.el.nx_snmp_agent.enable_v2.enable" display="SNMP Version 2" id="config.el.nx_snmp_agent.enable_v2">
      <option display="Enable" id="config.el.nx_snmp_agent.enable_v2.enable" value="1"/>
      <option display="Disable" id="config.el.nx_snmp_agent.enable_v2.disable" value="0"/>
    </property>
    <property default="config.el.nx_snmp_agent.enable_v3.enable" display="SNMP Version 3" id="config.el.nx_snmp_agent.enable_v3">
      <option display="Enable" id="config.el.nx_snmp_agent.enable_v3.enable" value="1"/>
      <option display="Disable" id="config.el.nx_snmp_agent.enable_v3.disable" value="0"/>
    </property>
    <content>
      
      /* Module specific overrides */
      #define NX_SNMP_AGENT_THREAD_STACK_SIZE           (${config.el.nx_snmp_agent.stack_size})
      #define NX_SNMP_AGENT_PRIORITY                    (${config.el.nx_snmp_agent.nx_snmp_agent_priority})
      #define NX_SNMP_TYPE_OF_SERVICE                   ${config.el.nx_snmp_agent.nx_snmp_type_of_service}
      #define NX_SNMP_FRAGMENT_OPTION                   ${config.el.nx_snmp_agent.nx_snmp_fragment_option}
      #define NX_SNMP_TIME_TO_LIVE                      (${config.el.nx_snmp_agent.nx_snmp_time_to_live})
      #define NX_SNMP_AGENT_TIMEOUT                     (${config.el.nx_snmp_agent.nx_snmp_agent_timeout})
      #define NX_SNMP_MAX_OCTET_STRING                  (${config.el.nx_snmp_agent.nx_snmp_max_octet_string})
      #define NX_SNMP_MAX_CONTEXT_STRING                (${config.el.nx_snmp_agent.nx_snmp_max_context_string})
      #define NX_SNMP_MAX_USER_NAME                     (${config.el.nx_snmp_agent.nx_snmp_max_user_name})
      #define NX_SNMP_MAX_SECURITY_KEY                  (${config.el.nx_snmp_agent.nx_snmp_max_security_key})
      #define NX_SNMP_PACKET_SIZE                       (${config.el.nx_snmp_agent.nx_snmp_min_packet_size})
      #define NX_SNMP_AGENT_PORT                        (${config.el.nx_snmp_agent.nx_snmp_agent_port})
      #define NX_SNMP_MANAGER_TRAP_PORT                 (${config.el.nx_snmp_agent.nx_snmp_manager_trap_port})
      #define NX_SNMP_MAX_TRAP_NAME                     (${config.el.nx_snmp_agent.nx_snmp_max_trap_name})
      #define NX_SNMP_MAX_TRAP_KEY                      (${config.el.nx_snmp_agent.nx_snmp_max_trap_key})
      #define NX_SNMP_TIME_INTERVAL                     (${config.el.nx_snmp_agent.nx_snmp_time_interval})
      #if (!${config.el.nx_snmp_agent.enable_v1})
      #define NX_SNMP_DISABLE_V1
      #endif
      #if (!${config.el.nx_snmp_agent.enable_v2})
      #define NX_SNMP_DISABLE_V2
      #endif
      #if (!${config.el.nx_snmp_agent.enable_v3})
      #define NX_SNMP_DISABLE_V3
      #endif

    </content>
  </config>
  <module config="config.el.nx_snmp_agent" display="X-Ware|NetX|Protocols|${module.el.nx_snmp_agent.name} NetX SNMP Agent" id="module.el.nx_snmp_agent" version="1">
    <constraint display="Module instances must have unique names">
      "${interface.el.nx_snmp_agent.${module.el.nx_snmp_agent.name}}" === "1"
    </constraint>
    <requires interface="_rtos" />
    <requires id="module.el.nx_snmp_agent.requires.nx.ip" interface="interface.el.nx_original.ip" display="Add NetX IP Instance" >
      <override property="module.el.nx.ip.arp" value="module.el.nx.ip.arp.enable" />
      <override property="module.el.nx.ip.udp" value="module.el.nx.ip.udp.enable" />
    </requires>
    <requires id="module.el.nx_snmp_agent.requires.nx.packet_pool" interface="interface.el.nx_original.packet_pool" display="Add NetX Packet Pool" />
    <requires id="module.el.nx_snmp_agent.requires.nx_md5" interface="interface.el.nx_md5" display="Add NetX MD5" />
    <requires id="module.el.nx_snmp_agent.requires.nx_des" interface="interface.el.nx_des" display="Add NetX DES" />
    <requires id="module.el.nx_snmp_agent.requires.nx_sha1" interface="interface.el.nx_sha1" display="Add NetX SHA1" />


    <!-- NetX and NetX Duo -->
    <provides interface="interface.el.nx_snmp_agent" />
    <provides interface="interface.el.nx_snmp_agent.${module.el.nx_snmp_agent.name}" />

    <property default="g_snmp_agent${_instance}" display="Name" id="module.el.nx_snmp_agent.name">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.name}")
      </constraint>
    </property>
    <property default="public" display="Read Community String" id="module.el.nx_snmp_agent.sf_public_string">
      <constraint display="Must be less than 64 chars">(${module.el.nx_snmp_agent.sf_public_string}.length &lt; 64)
      </constraint>
    </property>
    <property default="private" display="Write Community String" id="module.el.nx_snmp_agent.sf_private_string">
      <constraint display="Must be less than 64 chars">(${module.el.nx_snmp_agent.sf_private_string}.length &lt; 64)
      </constraint>
    </property>
    <property default="sf_snmp${_instance}_username_handler" display="Name of SNMP Username Handler" id="module.el.nx_snmp_agent.sf_snmp_username_handler">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.sf_snmp_username_handler}")
      </constraint>
    </property>
    <property default="sf_snmp${_instance}_get_handler" display="Name of SNMP GET Handler" id="module.el.nx_snmp_agent.sf_snmp_get_handler">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.sf_snmp_get_handler}")
      </constraint>
    </property>
    <property default="sf_snmp${_instance}_getnext_handler" display="Name of SNMP GETNEXT Handler" id="module.el.nx_snmp_agent.sf_snmp_getnext_handler">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.sf_snmp_getnext_handler}")
      </constraint>
    </property>
    <property default="sf_snmp${_instance}_set_handler" display="Name of SNMP SET Handler" id="module.el.nx_snmp_agent.sf_snmp_set_handler">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.sf_snmp_set_handler}")
      </constraint>
    </property>
    <property default="snmp_agent_init${_instance}" display="Name of generated initialization function" id="module.el.nx_snmp_agent.init_function">
      <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_snmp_agent.init_function}")</constraint>
    </property>
    <property default="module.el.nx_snmp_agent.init.enable" display="Auto Initialization" id="module.el.nx_snmp_agent.init">
      <option display="Enable"  id="module.el.nx_snmp_agent.init.enable"  value="1"/>
      <option display="Disable" id="module.el.nx_snmp_agent.init.disable" value="0"/>
    </property>
    <property default="${_instance}" display="SNMP agent instance id" id="module.el.nx_snmp_agent.nx_snmp_agent_instance">
      <constraint display="Value must be a non-negative integer">
        testInteger("${module.el.nx_snmp_agent.nx_snmp_agent_instance}")  &amp;&amp; ("${module.el.nx_snmp_agent.nx_snmp_agent_instance}" &gt;= 0)
      </constraint>
    </property>
    <header>

      extern NX_SNMP_AGENT ${module.el.nx_snmp_agent.name};
      
      /* Function Declarations */
      void ${module.el.nx_snmp_agent.init_function}(void);

      /* These handlers should be implemented by the user */
      UINT ${module.el.nx_snmp_agent.sf_snmp_username_handler}(NX_SNMP_AGENT *, UCHAR *);
      UINT ${module.el.nx_snmp_agent.sf_snmp_get_handler}(NX_SNMP_AGENT *, UCHAR *, NX_SNMP_OBJECT_DATA *);
      UINT ${module.el.nx_snmp_agent.sf_snmp_getnext_handler}(NX_SNMP_AGENT *, UCHAR *, NX_SNMP_OBJECT_DATA *);
      UINT ${module.el.nx_snmp_agent.sf_snmp_set_handler}(NX_SNMP_AGENT *, UCHAR *, NX_SNMP_OBJECT_DATA *);

    </header>
    <includes>
      #include "nx_snmp.h"
    </includes>
    <macros>
    </macros>
    <declarations>
      /* Define the SNMP agent */
      NX_SNMP_AGENT   ${module.el.nx_snmp_agent.name};
      
      #if defined(__ICCARM__)
      #define ${module.el.nx_snmp_agent.name}_err_callback_WEAK_ATTRIBUTE
      #pragma weak ${module.el.nx_snmp_agent.name}_err_callback  = ${module.el.nx_snmp_agent.name}_err_callback_internal
      #elif defined(__GNUC__)
      #define ${module.el.nx_snmp_agent.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nx_snmp_agent.name}_err_callback_internal")))
      #endif

      void ${module.el.nx_snmp_agent.name}_err_callback(void * p_instance, void * p_data) ${module.el.nx_snmp_agent.name}_err_callback_WEAK_ATTRIBUTE;
      /*********************************************************************************************************************
      * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function
      *             with the prototype below.
      *             - void ${module.el.nx_snmp_agent.name}_err_callback(void * p_instance, void * p_data)
      *
      * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
      **********************************************************************************************************************/
      void ${module.el.nx_snmp_agent.name}_err_callback_internal(void * p_instance, void * p_data);
      void ${module.el.nx_snmp_agent.name}_err_callback_internal(void * p_instance, void * p_data)
      {
        /** Suppress compiler warning for not using parameters. */
        SSP_PARAMETER_NOT_USED(p_instance);
        SSP_PARAMETER_NOT_USED(p_data);

        /** An error has occurred. Please check function arguments for more information. */
        BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
      }



      uint8_t ${module.el.nx_snmp_agent.name}_stack_memory[NX_SNMP_AGENT_THREAD_STACK_SIZE];
      /*********************************************************************************************************************
      * @brief     Initialization function that the user can choose to have called automatically during thread entry.
      *            The user can call this function at a later time if desired using the prototype below.
      *            - void ${module.el.nx_snmp_agent.init_function}(void)
      **********************************************************************************************************************/
      void ${module.el.nx_snmp_agent.init_function}(void)
      {
        UINT ${module.el.nx_snmp_agent.name}_err;
        /* Create SNMP Client. */
        ${module.el.nx_snmp_agent.name}_err = nx_snmp_agent_create(&amp;${module.el.nx_snmp_agent.name},
                                                                    "REA SNMP AGENT${module.el.nx_snmp_agent.nx_snmp_agent_instance}",
                                                                    &amp;${module.el.nx_snmp_agent.requires.nx.ip::module.el.nx.ip.name},
                                                                    &amp;${module.el.nx_snmp_agent.name}_stack_memory[0],
                                                                    NX_SNMP_AGENT_THREAD_STACK_SIZE,
                                                                    &amp;${module.el.nx_snmp_agent.requires.nx.packet_pool::module.el.nx.packet_pool.name},
                                                                    ${module.el.nx_snmp_agent.sf_snmp_username_handler},
                                                                    ${module.el.nx_snmp_agent.sf_snmp_get_handler},
                                                                    ${module.el.nx_snmp_agent.sf_snmp_getnext_handler},
                                                                    ${module.el.nx_snmp_agent.sf_snmp_set_handler});
        if (NX_SUCCESS != ${module.el.nx_snmp_agent.name}_err)
        {
          ${module.el.nx_snmp_agent.name}_err_callback((void *)&amp;${module.el.nx_snmp_agent.name},&amp;${module.el.nx_snmp_agent.name}_err);
        }

        /* Configure the community strings. These can be overriden by user before calling nx_snmp_agent_start */
        /* Configure Read community string */
        ${module.el.nx_snmp_agent.name}_err = nx_snmp_agent_public_string_set(&amp;${module.el.nx_snmp_agent.name}, (UCHAR *) "${module.el.nx_snmp_agent.sf_public_string}");
        if (NX_SUCCESS != ${module.el.nx_snmp_agent.name}_err)
        {
          ${module.el.nx_snmp_agent.name}_err_callback((void *)&amp;${module.el.nx_snmp_agent.name},&amp;${module.el.nx_snmp_agent.name}_err);
        }

        /* Configure Write community string */
        ${module.el.nx_snmp_agent.name}_err = nx_snmp_agent_private_string_set (&amp;${module.el.nx_snmp_agent.name}, (UCHAR *) "${module.el.nx_snmp_agent.sf_private_string}");
        if (NX_SUCCESS != ${module.el.nx_snmp_agent.name}_err)
        {
          ${module.el.nx_snmp_agent.name}_err_callback((void *)&amp;${module.el.nx_snmp_agent.name},&amp;${module.el.nx_snmp_agent.name}_err);
        }
      }

    </declarations>
    <init>
      /** Call initialization function if user has selected to do so. */
      #if (${module.el.nx_snmp_agent.init})
      ${module.el.nx_snmp_agent.init_function}();
      #endif
    </init>
  </module>
</synergyModuleDescription>
