<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_comms" path="ssp_cfg/framework/sf_comms_telnet_cfg.h" version="0">
        <property default="config.framework.sf_comms.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_comms.param_checking_enable" description="Selects if code for parameter checking is to be included in the build.">
            <option display="Default (BSP)" id="config.framework.sf_comms.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.framework.sf_comms.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_comms.param_checking_enable.disabled" value="(0)"/>
        </property>
        <property default="1536" display="Packet size in pool memory (bytes)" id="config.framework.sf_comms.packet_size_bytes" description="Specify the packet size in bytes.">
            <constraint display="Value must be a non-zero positive integer">
                testInteger("${config.framework.sf_comms.packet_size_bytes}")  &amp;&amp; ("${config.framework.sf_comms.packet_size_bytes}" &gt; 0)
            </constraint>
        </property>
        <property default="5" display="Packets to allocate in pool memory (units)" id="config.framework.sf_comms.packets_in_pool_memory" description="Specify the number of packets to allow in memory pool.">
            <constraint display="Value must be a non-zero positive integer">
                testInteger("${config.framework.sf_comms.packets_in_pool_memory}")  &amp;&amp; ("${config.framework.sf_comms.packets_in_pool_memory}" &gt; 0)
            </constraint>
        </property>
        <property default="10" display="Timeout for internal operations (ticks)" id="config.framework.sf_comms.internal_timeout" description="Specify the timeout in ticks.">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.framework.sf_comms.internal_timeout}")  &amp;&amp; ("${config.framework.sf_comms.internal_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="4" display="Maximum number of instances" description="Maximum instances that can be open at any given time" id="config.framework.sf_comms.max_connection">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.framework.sf_comms.max_connection}")  &amp;&amp; ("${config.framework.sf_comms.max_connection}" &gt;= 0)
            </constraint>
        </property>
        <content>
            #define SF_COMMS_TELNET_CFG_PARAM_CHECKING_ENABLE  ${config.framework.sf_comms.param_checking_enable}
            #define SF_COMMS_TELNET_PACKET_SIZE_BYTES          (${config.framework.sf_comms.packet_size_bytes}U)
            #define SF_COMMS_TELNET_PACKETS_IN_POOL_MEMORY     (${config.framework.sf_comms.packets_in_pool_memory}U)
            #define SF_COMMS_TELNET_INTERNAL_TIMEOUT           (${config.framework.sf_comms.internal_timeout}U)
            #define SF_COMMS_TELNET_MAX_CONNECTION             (${config.framework.sf_comms.max_connection}U)
        </content>
    </config>
    <module config="config.framework.sf_comms" display="Framework|Connectivity|${module.framework.sf_comms.name} Communications Framework on sf_comms_telnet" id="module.framework.sf_comms" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.framework.sf_comms.${module.framework.sf_comms.name}}" === "1"
        </constraint>
        <constraint display="Telnet server must serve maximum one client">
            (testExists("${config.el.nx_telnet_server_v2.max_client}") &amp;&amp; "${config.el.nx_telnet_server_v2.max_client}" === "1") || 
            (testExists("${config.el.nxd_telnet_server_v2.max_client}") &amp;&amp; "${config.el.nxd_telnet_server_v2.max_client}" === "1") 
        </constraint>
        <requires interface="_rtos" />
        <requires id="module.framework.sf_comms.requires.nx_telnet_server_v2" interface="interface.el.nx_telnet_server_v2" display="Add NetX Telnet Server Framework" >
            <override property="module.el.nx_telnet_server_v2.client_connect_function" value="NULL" />
            <override property="module.el.nx_telnet_server_v2.receive_data_function" value="NULL" />
            <override property="module.el.nx_telnet_server_v2.client_disconnect_function" value="NULL" />
            <override property="module.el.nx_telnet_server_v2.init" value="module.el.nx_telnet_server_v2.init.disable" />
        </requires>
        <provides interface="interface.framework.sf_comms" />
        <provides interface="interface.framework.sf_comms_on_sf_comms_telnet" />
        <provides interface="interface.framework.sf_comms.${module.framework.sf_comms.name}" />
        <property default="sf_comms_telnet${_instance}" display="Name" id="module.framework.sf_comms.name" description="Module name.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_comms.name}")</constraint>
        </property>
        <property default="sf_comms_telnet_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_comms.init_function" description="Specify the name of the generated initialization function.">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_comms.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_comms.init.enable" display="Auto Initialization" id="module.framework.sf_comms.init" description="Select if sf_comms_telnet will be initialized during startup.">
            <option display="Enable"  id="module.framework.sf_comms.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_comms.init.disable" value="0"/>
        </property>        
        <header>
            extern const sf_comms_instance_t ${module.framework.sf_comms.name};
            extern uint8_t ${module.framework.sf_comms.requires.nx_telnet_server_v2::module.el.nx_telnet_server_v2.name}_stack_memory[];
            void ${module.framework.sf_comms.name}_err_callback(void * p_instance, void * p_data);
            void ${module.framework.sf_comms.init_function}(void);
        </header>
        <includes>
            #include &quot;sf_comms_telnet.h&quot;
            #include &quot;sf_comms_api.h&quot;
        </includes>
        <declarations>
            #if defined(__ICCARM__)
            #define ${module.framework.sf_comms.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.framework.sf_comms.name}_err_callback  = ${module.framework.sf_comms.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.framework.sf_comms.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.framework.sf_comms.name}_err_callback_internal")))
            #endif
            void ${module.framework.sf_comms.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_comms.name}_err_callback_WEAK_ATTRIBUTE;
              
            sf_comms_telnet_instance_ctrl_t ${module.framework.sf_comms.name}_ctrl ;
            sf_comms_telnet_cfg_t ${module.framework.sf_comms.name}_cfg_extend =
            {
                .p_telnet_server       = &amp;${module.framework.sf_comms.requires.nx_telnet_server_v2::module.el.nx_telnet_server_v2.name},
                .p_telnet_server_name  = "${module.framework.sf_comms.name} Telnet Server",
                .p_ip                  = ${module.framework.sf_comms.requires.nx_telnet_server_v2::module.el.nx_telnet_server_v2.name}_IP_PTR,
                .p_stack               = (VOID *) &amp;${module.framework.sf_comms.requires.nx_telnet_server_v2::module.el.nx_telnet_server_v2.name}_stack_memory[0],
                .stack_size            = ${module.framework.sf_comms.requires.nx_telnet_server_v2::module.el.nx_telnet_server_v2.stack_size},
            };
            const sf_comms_cfg_t ${module.framework.sf_comms.name}_cfg =
            {
                .p_extend = &amp;${module.framework.sf_comms.name}_cfg_extend,
            };
            
            /* Instance structure to use this module. */
            const sf_comms_instance_t ${module.framework.sf_comms.name} =
            {
                .p_ctrl        = &amp;${module.framework.sf_comms.name}_ctrl,
                .p_cfg         = &amp;${module.framework.sf_comms.name}_cfg,
                .p_api         = &amp;g_sf_comms_on_sf_comms_telnet
            };
            
            /*******************************************************************************************************************//**
             * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
             *             with the prototype below.
             *             - void ${module.framework.sf_comms.name}_err_callback(void * p_instance, void * p_data)
             *
             * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
             **********************************************************************************************************************/
            void ${module.framework.sf_comms.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.framework.sf_comms.name}_err_callback_internal(void * p_instance, void * p_data)
            {
              /** Suppress compiler warning for not using parameters. */
               SSP_PARAMETER_NOT_USED(p_instance);
               SSP_PARAMETER_NOT_USED(p_data);
            
              /** An error has occurred. Please check function arguments for more information. */
               BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }

            /*******************************************************************************************************************//**
            * @brief     Initialization function that the user can choose to have called automatically during thread entry.
            *            The user can call this function at a later time if desired using the prototype below.
            *            - void ${module.framework.sf_comms.init_function}(void)
            **********************************************************************************************************************/
            void ${module.framework.sf_comms.init_function}(void)
            {
                
                ssp_err_t ssp_err_${module.framework.sf_comms.name};

                ssp_err_${module.framework.sf_comms.name} = ${module.framework.sf_comms.name}.p_api->open(${module.framework.sf_comms.name}.p_ctrl, ${module.framework.sf_comms.name}.p_cfg);
                if (SSP_SUCCESS != ssp_err_${module.framework.sf_comms.name})
                {
                    ${module.framework.sf_comms.name}_err_callback((void *)&amp;${module.framework.sf_comms.name},&amp;ssp_err_${module.framework.sf_comms.name});
                }
            }            
        </declarations>
        <init>
            /** Call initialization function if user has selected to do so. */
            #if (${module.framework.sf_comms.init})
                ${module.framework.sf_comms.init_function}(); 
            #endif            
        </init>
    </module>
</synergyModuleDescription>