<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.framework.sf_cellular_qctlcatm1_socket" path="ssp_cfg/framework/sf_cellular_qctlcatm1_socket_cfg.h" version="0">
		<property default="config.framework.sf_cellular_qctlcatm1_socket.param_checking_enable.bsp" display="Parameter Checking" id="module.framework.sf_cellular_qctlcatm1_socket.param_checking_enable">
			<option display="Default (BSP)" id="config.framework.sf_cellular_qctlcatm1_socket.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="module.framework.sf_cellular_qctlcatm1_socket.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="module.framework.sf_cellular_qctlcatm1_socket.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>
		/** Parameter checking flag */
		#ifndef SF_CELLULAR_QCTLCATM1_SOCKET_CFG_PARAM_CHECKING_ENABLE
		#define SF_CELLULAR_QCTLCATM1_SOCKET_CFG_PARAM_CHECKING_ENABLE ${module.framework.sf_cellular_qctlcatm1_socket.param_checking_enable}
		#endif
		</content>
	</config>
	<module config="config.framework.sf_cellular_qctlcatm1_socket" display="Framework|Networking|Cellular|${module.framework.sf_cellular_qctlcatm1_socket.name} BSD Socket using Quectel CATM1 On-Chip Stack on Quectel CATM1 Cellular Framework" id="module.framework.sf_cellular_qctlcatm1_socket" version="1">
		<constraint display="Requires On-Chip Stack Support Enabled on ${module.framework.sf_cellular_qctlcatm1.name}">
            "${config.framework.sf_cellular_qctlcatm1.onchip_stack_support}" == "config.framework.sf_cellular_qctlcatm1.onchip_stack_support.enabled"
        </constraint>
		<requires interface="_rtos" />
		<requires id="module.framework.sf_cellular_qctlcatm1_socket.requires.sf_cellular" interface="interface.framework.sf_cellular" display="Add Cellular Framework" />
		<provides interface="interface.framework.sf_cellular_qctlcatm1_socket" />
		<provides interface="interface.framework.sf_cellular_socket_on_sf_cellular_qctlcatm1_socket" />
		<provides interface="interface.framework.sf_cellular_qctlcatm1_socket.${module.framework.sf_cellular_qctlcatm1_socket.name}" />
		<property default="g_sf_cellular_socket${_instance}" display="Name" id="module.framework.sf_cellular_qctlcatm1_socket.name" >
			<constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_qctlcatm1_socket.name}")</constraint>
        </property>
		<property default="sf_cellular_qctlcatm1_socket_init${_instance}" display="Name of generated initialization function" id="module.framework.sf_cellular_qctlcatm1_socket.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_cellular_qctlcatm1_socket.init_function}")</constraint>
        </property>
        <property default="module.framework.sf_cellular_qctlcatm1_socket.init.enable" display="Auto Initialization" id="module.framework.sf_cellular_qctlcatm1_socket.init">
            <option display="Enable"  id="module.framework.sf_cellular_qctlcatm1_socket.init.enable"  value="1"/>
            <option display="Disable" id="module.framework.sf_cellular_qctlcatm1_socket.init.disable" value="0"/>
        </property>
		<header>
		void ${module.framework.sf_cellular_qctlcatm1_socket.init_function}(void);
		/** sf_cellular_qctlcatm1_socket instance on Quectel CATM1 */
		extern sf_cellular_socket_instance_t ${module.framework.sf_cellular_qctlcatm1_socket.name};
		
		</header>
	<includes>#include &quot;sf_cellular_api.h&quot;
	#include &quot;sf_cellular_qctlcatm1_socket.h&quot;
	#include &quot;sf_cellular_socket_api.h&quot;</includes>
	<declarations>
/***********************************************************************************************************************
 * Cellular Socket Instance
 **********************************************************************************************************************/
/** Control structure for Socket */
static sf_cellular_socket_ctrl_t ${module.framework.sf_cellular_qctlcatm1_socket.name}_ctrl;

/** Configuration structure for sf_cellular_qctlcatm1_socket */
static const sf_cellular_socket_cfg_t  ${module.framework.sf_cellular_qctlcatm1_socket.name}_cfg =
{
  .p_lower_lvl_cellular = &amp;${module.framework.sf_cellular_qctlcatm1_socket.requires.sf_cellular::module.framework.sf_cellular.name},
};

sf_cellular_socket_instance_t ${module.framework.sf_cellular_qctlcatm1_socket.name} =
{
  .p_ctrl = &amp;${module.framework.sf_cellular_qctlcatm1_socket.name}_ctrl,
  .p_cfg  = &amp;${module.framework.sf_cellular_qctlcatm1_socket.name}_cfg,
  .p_api  = &amp;g_sf_cellular_socket_on_sf_cellular_qctlcatm1_socket,
};

/*******************************************************************************************************************//**
  * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
  *             with the prototype below.
  *             - void ${module.framework.sf_cellular_qctlcatm1_socket.name}_err_callback(void * p_instance, void * p_data)
  *
  * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
  **********************************************************************************************************************/
 void ${module.framework.sf_cellular_qctlcatm1_socket.name}_err_callback_internal(void * p_instance, void * p_data);
 void ${module.framework.sf_cellular_qctlcatm1_socket.name}_err_callback_internal(void * p_instance, void * p_data)
 {
    /** Suppress compiler warning for not using parameters. */
     SSP_PARAMETER_NOT_USED(p_instance);
     SSP_PARAMETER_NOT_USED(p_data);

    /** An error has occurred. Please check function arguments for more information. */
     BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
 }
/*******************************************************************************************************************//**
* @brief     Initialization function that the user can choose to have called automatically during thread entry.
*            The user can call this function at a later time if desired using the prototype below.
*            - void ${module.framework.sf_cellular_qctlcatm1_socket.init_function}(void)
**********************************************************************************************************************/
void ${module.framework.sf_cellular_qctlcatm1_socket.init_function}(void)
{
    ssp_err_t ssp_err_${module.framework.sf_cellular_qctlcatm1_socket.name};
    ssp_err_${module.framework.sf_cellular_qctlcatm1_socket.name} = ${module.framework.sf_cellular_qctlcatm1_socket.name}.p_api->open(${module.framework.sf_cellular_qctlcatm1_socket.name}.p_ctrl, ${module.framework.sf_cellular_qctlcatm1_socket.name}.p_cfg);
    if (SSP_SUCCESS != ssp_err_${module.framework.sf_cellular_qctlcatm1_socket.name})
    {
        ${module.framework.sf_cellular_qctlcatm1_socket.name}_err_callback_internal((void *)&amp;${module.framework.sf_cellular_qctlcatm1_socket.name},&amp;ssp_err_${module.framework.sf_cellular_qctlcatm1_socket.name});
    }          
}
		</declarations>
		<init>
			/** Call initialization function if user has selected to do so. */
            #if (${module.framework.sf_cellular_qctlcatm1_socket.init})
                ${module.framework.sf_cellular_qctlcatm1_socket.init_function}();
            #endif
    	</init>
	</module>
</synergyModuleDescription>