/***********************************************************************************************************************
 * Copyright [2015] Renesas Electronics Corporation and/or its licensors. All Rights Reserved.
 *
 * The contents of this file (the "contents") are proprietary and confidential to Renesas Electronics Corporation
 * and/or its licensors ("Renesas") and subject to statutory and contractual protections.
 *
 * Unless otherwise expressly agreed in writing between Renesas and you: 1) you may not use, copy, modify, distribute,
 * display, or perform the contents; 2) you may not use any name or mark of Renesas for advertising or publicity
 * purposes or in connection with your use of the contents; 3) RENESAS MAKES NO WARRANTY OR REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE CONTENTS FOR ANY PURPOSE; THE CONTENTS ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
 * NON-INFRINGEMENT; AND 4) RENESAS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING DAMAGES RESULTING FROM LOSS OF USE, DATA, OR PROJECTS, WHETHER IN AN ACTION OF CONTRACT OR TORT, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE CONTENTS. Third-party contents included in this file may
 * be subject to different terms.
 **********************************************************************************************************************/
/**********************************************************************************************************************
* File Name    : sf_message.dox
* Description  : Extra documentation for the message framework
***********************************************************************************************************************
* History : DD.MM.YYYY Version Description
*           26.03.2015 1.00    Initial Release.
***********************************************************************************************************************/

/***********************************************************************************************************************
Functions
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn ssp_err_t SF_MESSAGE_Open (sf_message_ctrl_t * const p_ctrl, sf_message_cfg_t const * const p_cfg)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The size of the work memmory is 2048bytes.
    // - The size of a buffer for message is 64bytes.
    // - subscriber lists pointer array is defined as psubscriber_lists in the other file.

    extern sf_message_subscriber_list_t * psubscriber_lists [];

    ssp_err_t error;
    sf_message_ctrl_t myMessage;
    uint8_t work_buffer[2048];
    const sf_message_cfg_t message_cfg = 
    {
        .p_mem_start = &work_buffer,
        .work_memory_size = sizeof(work_buffer),
        .buffer_size = 64
        .pp_subscriber_lists = psubscriber_lists
        .p_block_pool_name   = (uint8_t*)"sf_message_blk_pool";
    };

    // Opens the messaging framework
    error = SF_MESSAGE_Open(&myMessage, &message_cfg);
    if (SSP_SUCCESS != error)
    {
        // Error returns, do error processing.
    }
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t SF_MESSAGE_Close (sf_message_ctrl_t * const p_ctrl)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The control block 'myMessage' is initiated by SF_MESSAGE_Open().
    
    // Close the messaging framework
    SF_MESSAGE_Close (&myMessage);
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn ssp_err_t SF_MESSAGE_BufferAcquire (sf_message_ctrl_t const * const p_ctrl, sf_message_header_t ** pp_buffer, sf_message_acquire_cfg_t const * const p_acquire_cfg, uint32_t const wait_option)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The control block 'myMessage' is initiated by SF_MESSAGE_Open().
    // - Get the address of allocated buffer on 'p_buffer'.
    // - Mark buffer keep option to reuse the buffer later without release the buffer.
    // - Wait 300 OS tick cycle if blocked at buffer acquisition.

    ssp_err_t error;
    sf_message_header_t * p_buffer;
    sf_message_acquire_cfg_t acquire_cfg =
    {
        .buffer_keep = true
    };

    // Gets buffer in the block memory pool managed by the messaging framework
    error = SF_MESSAGE_BufferAcquire (&myMessage, &p_buffer, &acquire_cfg, 300);
    if (SSP_SUCCESS =! error)
    {
        // Performs error processing
    }
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn ssp_err_t SF_MESSAGE_BufferRelease (sf_message_ctrl_t *const  p_ctrl, sf_message_header_t *const p_buffer, sf_message_release_option_t const option)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The control block 'myMessage' is initiated by SF_MESSAGE_Open().
    // - The address of buffer 'p_buffer' has been obtained by SF_MESSAGE_Pend().
    // - This API function is called on the event listener thread.
    // - The event listener thread has been receiving a message and done event processing corresponding to the event.
    // - Provides no buffer release option

    // Performs event close processing. Invokes an user callback function if it is registered by the message sender
    // thread, then releases an allocated buffer if this thread is the last message receiver in multiple subscriver case.
    SF_MESSAGE_BufferRelease (&myMessage, &p_buffer, SF_MESSAGE_RELEASE_OPTION_NONE);
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn ssp_err_t SF_MESSAGE_Post (sf_message_ctrl_t * const p_ctrl, sf_message_header_t const * const p_buffer, sf_message_post_cfg_t const * const p_post_cfg, uint32_t const wait_option)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The control block 'myMessage' is initiated by SF_MESSAGE_Open().
    // - The address of buffer 'p_buffer' has been obtained by SF_MESSAGE_BufferAcquire().
    // - Sends message to event listeners who are subscribing SF_MESSAGE_EVENT_CLASS_USER event class
    // - Sends SF_MESSAGE_EVENT_USER event
    // - Posts a message with normal priority
    // - Wait 300 OS tick cycle if blocked at message queue posting.
    // - No user callback function registered.
    sf_message_post_cfg_t post_cfg =
    {
        .priority   = SF_MESSAGE_PRIORITY_NORMAL;
        .p_callback = NULL;
    };
    sf_message_user_defined_payload_t * pPayload;    // This is an example of user defined payload

    // The allocated buffer should be casted to be used
    pPayload = (sf_message_user_defined_payload_t *)p_buffer;
    pPayload->p_header->event_b.class = SF_MESSAGE_EVENT_CLASS_USER;  // This is an example of event class which is defined by user
    pPayload->p_header->event_b.code  = SF_MESSAGE_EVENT_USER;        // This is an example of event which is defined by user

    // Posts message to the messaging system. User specific payload structure shall be casted to 
    // (sf_message_header_t *) type.
    SF_MESSAGE_Post (&myMessage, (sf_message_header_t *)pPayload, &post_cfg, 300);
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn ssp_err_t SF_MESSAGE_Pend (sf_message_ctrl_t const * const p_ctrl, TX_QUEUE const * const p_queue, sf_message_header_t ** pp_buffer, uint32_t const wait_option)
 * @code{.c}
    // Example code
    // The scenario for this example code:
    // - The control block 'myMessage' is initiated by SF_MESSAGE_Open().
    // - The message queue used for this event listener thread is 'myQueue'.
    // - Wait forever until receiving message.

    TX_QUEUE myQueue;
    sf_message_user_defined_payload_t * pPayload;    // This is an example of user defined payload which is defined by user

    // Event loop
    while (1)
    {
        // Pends message. When receiving a message, the address of the buffer to the message payload is obtained on p_buffer.
        error = SF_MESSAGE_Pend (&myMessage, &myQueue, (sf_message_header_t **)&pPayload, TX_WAIT_FOREVER);
        switch (pPayload->p_header->event_b.class)
        {
        case SF_MESSAGE_EVENT_CLASS_USER:
            if (pPayload->p_header->event_b.code == SF_MESSAGE_EVENT_USER)
            {
                // Do processing corresponding to the received event code
            }
            ...
            break;
        ...
        }
    }
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t SF_MESSAGE_VersionGet ( ssp_version_t *  p_version )
 * @code{.c}
    // Example code
    
    // Creates a variable the version is got
    ssp_version_t version;
    
    // Gets the version of the messaging framework
    SF_MESSAGE_VersionGet(&version);
 * @endcode
***********************************************************************************************************************/
